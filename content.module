<?php
// $Id$

/**
 * @file
 * Allows administrators to define new content types.
 */

/**
 * Implementation of hook_help().
 */
function content_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows administrators to define new content types.');
  }

  if (strpos($section, 'node/add') === 0) {
    $types = _content_types();
    foreach ($types as $type_name => $type) {
      if ($section == 'node/add#' . $type_name) {
        return t($types[$type_name]->description);
      }
      if ($section == 'node/add/' . $type_name) {
        return t($types[$type_name]->help);
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function content_perm() {
  $perms = array('administer content types');
  foreach (_content_types() as $name => $type) {
    $perms[] = 'create '. $name .' content';
    $perms[] = 'edit own '. $name .' content';
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function content_menu($may_cache) {
  $items = array();
  $access = user_access('administer content types');

  if ($may_cache) {
    $items[] = array('path' => 'admin/node/types', 'title' => t('content types'),
      'callback' => '_content_admin_type_overview', 'access' => $access);
    $items[] = array('path' => 'admin/node/types/list', 'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/node/types/add', 'title' => t('add content type'),
      'callback' => '_content_admin_type_edit', 'access' => $access,
      'type' => MENU_LOCAL_TASK);

    $types = _content_types();
    foreach ($types as $type_name => $type) {
      $items[] = array('path' => 'node/add/'. $type_name, 'title' => t($type->label),
        'access' => user_access('create '. $type_name .' content'));
    }
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'types' && arg(3)) {
      $types = _content_types();

      if (isset($types[arg(3)])) {
        $items[] = array('path' => 'admin/node/types/'. arg(3),
          'title' => t($types[arg(3)]->label),
          'callback' => '_content_admin_type_edit', 'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => 'admin/node/types/'. arg(3) .'/delete',
          'title' => t('delete'),
          'callback' => '_content_admin_type_delete', 'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_CALLBACK);
        $items[] = array('path' => 'admin/node/types/'. arg(3) .'/duplicate',
          'title' => t('duplicate'),
          'callback' => '_content_admin_type_edit', 'access' => $access,
          'callback arguments' => array('', arg(3)),
          'type' => MENU_CALLBACK);

        $items[] = array('path' => 'admin/node/types/'. arg(3) .'/edit',
          'title' => t('edit'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);

        $items[] = array('path' => 'admin/node/types/'. arg(3) .'/fields',
          'title' => t('manage fields'),
          'callback' => '_content_admin_field_overview', 'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_LOCAL_TASK,
          'weight' => 1);
        $items[] = array('path' => 'admin/node/types/'. arg(3) .'/add_field',
          'title' => t('add field'),
          'callback' => '_content_admin_field_add', 'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_LOCAL_TASK,
          'weight' => 2);

        if (arg(4) == 'fields' && arg(5)
            && isset($types[arg(3)]->fields[arg(5)])) {
          $items[] = array('path' => 'admin/node/types/'. arg(3) .'/fields/'. arg(5),
            'title' => t($types[arg(3)]->fields[arg(5)]['label']),
            'callback' => '_content_admin_field', 'access' => $access,
            'callback arguments' => array(arg(3), arg(5)),
            'type' => MENU_CALLBACK);
          $items[] = array('path' => 'admin/node/types/'. arg(3) .'/fields/'. arg(5) .'/remove',
            'title' => t('remove field'),
            'callback' => '_content_admin_field_remove', 'access' => $access,
            'callback arguments' => array(arg(3), arg(5)),
            'type' => MENU_CALLBACK);
        }

      }
    }
  }

  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function content_node_info() {
  $types = array();
  foreach (_content_types() as $name => $type) {
    $types[$name] = array('name' => t($type->label), 'base' => 'content');
  }
  return $types;
}

/**
 * Implementation of hook_access().
 */
function content_access($op, $node) {
  global $user;
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  if ($op == 'create') {
    return user_access('create '. $type .' content');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own '. $type .' content') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_load().
 */
function content_load($node) {
  return _content_field_invoke('load', $node);
}

/**
 * Implementation of hook_insert().
 */
function content_insert($node) {
  _content_field_invoke('insert', $node);
}

/**
 * Implementation of hook_update().
 */
function content_update($node) {
  _content_field_invoke('update', $node);
}

/**
 * Implementation of hook_delete().
 */
function content_delete($node) {
  _content_field_invoke('delete', $node);
}

/**
 * Implementation of hook_form().
 */
function content_form(&$node, &$param) {
  $form = array();
  $types = _content_types();
  $type = $types[$node->type];

  // Set form parameters so we can accept file uploads.
  $form['#attributes'] = array("enctype" => "multipart/form-data");

  $form['title'] = array('#type' => 'textfield', '#title' => t($type->title_label), '#required' => TRUE, '#default_value' => $node->title);
  $form = array_merge($form, _content_field_invoke('form', $node));
  return $form;
}

/**
 * Implementation of hook_validate().
 */
function content_validate(&$node) {
  _content_field_invoke('validate', $node);
}

/**
 * Implementation of hook_view().
 */
function content_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node->body = implode(_content_field_invoke('view', $node, $teaser, $page));
  $node->teaser = implode(_content_field_invoke('view', $node, $teaser, $page));
  $node->readmore = TRUE;
}

/**
 * Fetch a list of nodes from the database.
 */
function content_node_query($conditions = array(), $sort = array(), $fields = array('node_nid')) {
  $fields = _content_fields();
  $field_types = _content_field_types();

  $join = array();
  $where = array();
  $data = array();
  $table_num = 0;
  foreach ($conditions as $condition) {
    $field = $fields[$condition['field']];
    $query_additions = module_invoke($field_types[$field['type']]['module'], 'field_query', $field, $condition['op'], $condition['value']);
    $table_names = array();
    $table_aliases = array();
    foreach ($query_additions['tables'] as $name => $table) {
      $table_names[] = $name;
      $join[] = 'INNER JOIN {'. $table .'} t'. $table_num .' ON n.nid = t'. $table_num .'.nid';
      $table_aliases[] = 't'. $table_num;
      $table_num++;
    }
    $where[] = str_replace($table_names, $table_aliases, $query_additions['where']);
    $data = array_merge($data, $query_additions['data']);
  }
  $join_sql = implode(' ', $join);
  if (count($where) > 0) {
    $where_sql = implode(' AND ', $where);
  }
  else {
    $where_sql = '1';
  }
  $result = pager_query(db_rewrite_sql('SELECT n.nid FROM {node} n '. $join_sql .' WHERE '. $where_sql .' ORDER BY n.sticky DESC, n.created DESC'), variable_get('default_nodes_main', 10), 0, NULL, $data);

  return $result;
}



/**
 * Menu callback; presents a listing of content types.
 */
function _content_admin_type_overview() {
  $types = _content_types();

  $header = array(t('Label'), t('Name'), t('Description'), array('data' => t('Operations'), 'colspan' => 3));
  $rows = array();
  foreach ($types as $type) {
    $row = array();
    $row[] = $type->label;
    $row[] = $type->type_name;
    $row[] = $type->description;

    $row[] = l(t('edit'), 'admin/node/types/'. $type->type_name);
    $row[] = l(t('duplicate'), 'admin/node/types/'. $type->type_name .'/duplicate');
    $row[] = l(t('delete'), 'admin/node/types/'. $type->type_name .'/delete');

    $rows[] = $row;
  }

  $output = theme('table', $header, $rows);

  return $output;
}

/**
 * Menu callback; handles the editing of a content type.
 */
function _content_admin_type_edit($type_name = '', $original_type_name = '') {
  $types = _content_types();
  if (array_key_exists($type_name, $types)) {
    $type = $types[$type_name];
  }
  else {
    if (array_key_exists($original_type_name, $types)) {
      $type = $types[$original_type_name];
    }
    else {
      $type = new stdClass();
      $type->title_label = 'Title';
    }
  }

  $form = array();
  $form['label'] = array('#title' => t('Label'), '#type' => 'textfield', '#default_value' => $type->label, '#description' => t('The human-readable name of this content type.'), '#required' => TRUE);
  $form['description'] = array('#title' => t('Description'), '#type' => 'textarea', '#default_value' => $type->description, '#rows' => 10, '#description' => t('A brief description of the content type.'), '#required' => FALSE);
  $form['help'] = array('#title' => t('Help text'), '#type' => 'textarea', '#default_value' => $type->help, '#rows' => 10, '#description' => t('Instructions to present to the user when adding new content of this type.'), '#required' => FALSE);
  $form['title_label'] = array('#title' => t('Title field label'), '#type' => 'textfield', '#default_value' => $type->title_label, '#description' => t('The label for the title field.'), '#required' => TRUE);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save content type'));
  $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
  $form['original_type_name'] = array('#type' => 'value', '#value' => $original_type_name);
  return drupal_get_form('_content_admin_type_edit', $form);
}

/**
 * Save a content type after editing.
 */
function _content_admin_type_edit_execute($form_id, $form_values) {
  $types = _content_types();
  if (!array_key_exists($form_values['type_name'], $types)) {
    // Find a valid, computer-friendly type name.
    $form_values['type_name'] = trim($form_values['label']);
    $form_values['type_name'] = drupal_strtolower($form_values['type_name']);
    $form_values['type_name'] = str_replace(array(' ', '-'), '_', $form_values['type_name']);
    $form_values['type_name'] = preg_replace('/[^a-z0-9_]/', '', $form_values['type_name']);
    $form_values['type_name'] = 'content-'. $form_values['type_name'];
    $form_values['type_name'] = substr($form_values['type_name'], 0, 31);
    if (array_key_exists($form_values['type_name'], $types)) {
      $counter = 0;
      do {
        $new_name = substr($form_values['type_name'], 0, 29) .'_'. $counter++;
      } while (array_key_exists($new_name, $types));
      $form_values['type_name'] = $new_name;
    }

    db_query("INSERT INTO {node_type} (type_name, label, description, help, title_label) VALUES ('%s', '%s', '%s', '%s', '%s')", $form_values['type_name'], $form_values['label'], $form_values['description'], $form_values['help'], $form_values['title_label']);
  }
  else {
    db_query("UPDATE {node_type} SET label = '%s', description = '%s', help = '%s', title_label = '%s' WHERE type_name = '%s'", $form_values['label'], $form_values['description'], $form_values['help'], $form_values['title_label'], $form_values['type_name']);
  }
  
  if (array_key_exists('original_type_name', $form_values)) {
    // Duplicate the field structure from the old content type.
    db_query("INSERT INTO {node_field_instance} (field_name, type_name, weight, label, instance_settings) SELECT field_name, '%s', weight, label, instance_settings FROM {node_field_instance} WHERE type_name = '%s'", $form_values['type_name'], $form_values['original_type_name']);
  }

  drupal_set_message(t('Saved content type %type.', array('%type' => theme('placeholder', $form_values['label']))));
  cache_clear_all('content_types');
  drupal_goto('admin/node/types/'. $form_values['type_name']);
}

/**
 * Menu callback; delete a content type.
 */
function _content_admin_type_delete($type_name = '') {
  $types = _content_types();
  $type = $types[$type_name];

  $form = array();
  $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
  return confirm_form('_content_admin_type_delete', $form, t('Are you sure you want to delete the content type %type?', array('%type' => theme('placeholder', $type->label))), 'admin/node/types', t('If you have any content left in this content type, it will be permanently deleted. This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Delete a content type.
 */
function _content_admin_type_delete_execute($form_id, $form_values) {
  $types = _content_types();
  $type = $types[$form_values['type_name']];
  
  if ($type && $form_values['confirm']) {
    // Delete all nodes of this content type.
    $result = db_query("SELECT nid FROM {node} WHERE type = '%s'", $form_values['type_name']);
    while ($node = db_fetch_object($result)) {
      $node = node_load($node->nid);
      db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
      db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);
      node_invoke($node, 'delete');
      node_invoke_nodeapi($node, 'delete');
      if (function_exists('search_wipe')) {
        search_wipe($node->nid, 'node');
      }
    }
    db_query("DELETE FROM {node_field_instance} WHERE type_name = '%s'", $form_values['type_name']);
    db_query("DELETE FROM {node_type} WHERE type_name = '%s'", $form_values['type_name']);

    drupal_set_message(t('Deleted content type %type.', array('%type' => theme('placeholder', $type->label))));
    cache_clear_all('content_types');
    drupal_goto('admin/node/types');
  }
}


/**
 * Menu callback; presents a listing of fields for a content type.
 */
function _content_admin_field_overview($type_name) {
  $types = _content_types();
  $type = $types[$type_name];
  $field_types = _content_field_types();

  $header = array(t('Label'), t('Name'), t('Type'), array('data' => t('Operations'), 'colspan' => 2));
  $rows = array();
  $rows[] = array($type->title_label, 'title', '', '', '');
  foreach ($type->fields as $field) {
    $row = array();
    $row[] = $field['label'];
    $row[] = $field['field_name'];
    $row[] = $field_types[$field['type']]['label'];

    $row[] = l(t('configure'), 'admin/node/types/'. $type_name .'/fields/'. $field['field_name']);
    $row[] = l(t('remove'), 'admin/node/types/'. $type_name .'/fields/'. $field['field_name'] .'/remove');

    $rows[] = $row;
  }

  $output = theme('table', $header, $rows);

  return $output;
}

/**
 * Menu callback; presents the form for adding a new field.
 */
function _content_admin_field_add($type_name) {
  $types = _content_types();
  $type = $types[$type_name];
  $field_types = _content_field_types();
  $fields = _content_fields();
  $output = '';

  $options = array();
  foreach ($fields as $field) {
    if (!array_key_exists($field['field_name'], $type->fields))
    $options[$field['field_name']] = t($field['label']) .' ('. $field['field_name'] .')';
  }
  if ($options) {
    $form = array();
    $form['field_name'] = array('#type' => 'select', '#required' => TRUE, '#options' => $options);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Add field'));
    $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
    $output .= drupal_get_form('_content_admin_field_add_existing', $form);
  }
  
  $form = array();
  $form['label'] = array('#title' => t('Label'), '#type' => 'textfield', '#default_value' => '', '#description' => t('The human-readable name of this field.'), '#required' => TRUE);
  $options = array();
  foreach ($field_types as $field_name => $field_type) {
    $options[$field_name] = $field_type['label'];
  }
  $form['type'] = array('#type' => 'select', '#required' => TRUE, '#options' => $options);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Create field'));
  $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
  $output .= drupal_get_form('_content_admin_field_add_new', $form);

  return $output;
}

/**
 * Add an existing field to a content type.
 */
function _content_admin_field_add_existing_execute($form_id, $form_values) {
  $prior_instance = db_fetch_object(db_query("SELECT weight, label, instance_settings FROM {node_field_instance} WHERE field_name = '%s'", $form_values['field_name']));
  if (!$prior_instance) {
    $prior_instance = new stdClass;
    $prior_instance->weight = 0;
    $prior_instance->label = $form_values['field_name'];
    $prior_instance->instance_settings = '';
  }
  db_query("INSERT INTO {node_field_instance} (field_name, type_name, weight, label, instance_settings) VALUES ('%s', '%s', %d, '%s', '%s')", $form_values['field_name'], $form_values['type_name'], $prior_instance->weight, $prior_instance->label, $prior_instance->instance_settings);

  drupal_set_message(t('Added field %label.', array('%label' => theme('placeholder', $prior_instance->label))));
  cache_clear_all('content_types');
  drupal_goto('admin/node/types/'. $form_values['type_name'] .'/fields');
}

/**
 * Create a new field for a content type.
 */
function _content_admin_field_add_new_execute($form_id, $form_values) {
  // Find a valid, computer-friendly type name.
  $field_name = trim($form_values['label']);
  $field_name = drupal_strtolower($field_name);
  $field_name = str_replace(array(' ', '-'), '_', $field_name);
  $field_name = preg_replace('/[^a-z0-9_]/', '', $field_name);
  $field_name = 'field_'. $field_name;
  $field_name = substr($field_name, 0, 31);
  if (array_key_exists($field_name, $types)) {
    $counter = 0;
    do {
      $new_name = substr($field_name, 0, 29) .'_'. $counter++;
    } while (array_key_exists($new_name, $types));
    $field_name = $new_name;
  }

  db_query("INSERT INTO {node_field} (field_name, type) VALUES ('%s', '%s')", $field_name, $form_values['type']);

  db_query("INSERT INTO {node_field_instance} (type_name, field_name, label) VALUES ('%s', '%s', '%s')", $form_values['type_name'], $field_name, $form_values['label']);

  drupal_set_message(t('Created field %label.', array('%label' => theme('placeholder', $form_values['label']))));
  cache_clear_all('content_types');
  drupal_goto('admin/node/types/'. $form_values['type_name'] .'/fields/'. $field_name);
}

/**
 * Menu callback; delete a content type.
 */
function _content_admin_field_remove($type_name, $field_name) {
  $types = _content_types();
  $type = $types[$type_name];
  $field = $type->fields[$field_name];

  $form = array();
  $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
  $form['field_name'] = array('#type' => 'value', '#value' => $field_name);
  return confirm_form('_content_admin_field_remove', $form, t('Are you sure you want to remove the field %field?', array('%field' => theme('placeholder', $field['label']))), 'admin/node/types/'. $type_name .'/fields', t('If you have any content left in this field, it will be lost. This action cannot be undone.'), t('Remove'), t('Cancel'));
}

/**
 * Remove a field from a content type.
 */
function _content_admin_field_remove_execute($form_id, $form_values) {
  $types = _content_types();
  $type = $types[$form_values['type_name']];
  $field = $type->fields[$form_values['field_name']];
  
  if ($type && $field && $form_values['confirm']) {
    db_query("DELETE FROM {node_field_instance} WHERE type_name = '%s' AND field_name = '%s'", $form_values['type_name'], $form_values['field_name']);

    drupal_set_message(t('Removed field %field from %type.', array('%field' => theme('placeholder', $field['label']), '%type' => theme('placeholder', $type->label))));
    cache_clear_all('content_types');
    drupal_goto('admin/node/types/'. $form_values['type_name'] .'/fields');
  }
}


/**
 * Menu callback; presents the field editing page.
 */
function _content_admin_field($type_name, $field_name) {
  $output = '';
  $types = _content_types();
  $type = $types[$type_name];
  $field = $type->fields[$field_name];
  $field_types = _content_field_types();
  $field_type = $field_types[$field['type']];

  $form = array();
  $form['instance'] = array('#type' => 'fieldset', '#title' => t('Instance settings'), '#description' => t('These settings apply only to the %field field as it appears in the %type content type.', array('%field' => theme('placeholder', $field['label']), '%type' => theme('placeholder', $type->label))));
  $form['instance']['label'] = array('#type' => 'textfield', '#title' => t('Label'), '#default_value' => $field['label'], '#required' => TRUE);
  $form['instance']['weight'] = array('#type' => 'weight', '#title' => t('Weight'), '#default_value' => $field['weight'], '#description' => t('In the node editing form, the heavier fields will sink and the lighter fields will be positioned nearer the top.'));
  $form['instance'] = array_merge($form['instance'], module_invoke($field_type['module'], 'field_settings', 'form', $field, 'instance'));

  $form['global'] = array('#type' => 'fieldset', '#title' => t('Global settings'), '#description' => t('These settings apply to the %field field in every content type in which it appears.', array('%field' => theme('placeholder', $field['label']))));
  $form['global']['required'] = array('#type' => 'checkbox', '#title' => t('Required'), '#default_value' => $field['required']);
  $form['global']['multiple'] = array('#type' => 'checkbox', '#title' => t('Multiple values'), '#default_value' => $field['multiple']);
  $form['global'] = array_merge($form['global'], module_invoke($field_type['module'], 'field_settings', 'form', $field, 'global'));

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save field settings'));
  $form['type_name'] = array('#type' => 'value', '#value' => $type_name);
  $form['field_name'] = array('#type' => 'value', '#value' => $field_name);

  $output .= drupal_get_form('_content_admin_field', $form);

  return $output;
}

/**
 * Validate a field's settings.
 */
function _content_admin_field_validate($form_id, $form_values) {
  $types = _content_types();
  $type = $types[$form_values['type_name']];
  $field = $type->fields[$form_values['field_name']];
  $field_types = _content_field_types();
  $field_type = $field_types[$field['type']];

  module_invoke($field_type['module'], 'field_settings', 'validate', array_merge($field, $form_values), 'instance');
  module_invoke($field_type['module'], 'field_settings', 'validate', array_merge($field, $form_values), 'global');
}

/**
 * Save a field's settings after editing.
 */
function _content_admin_field_execute($form_id, $form_values) {
  $types = _content_types();
  $type = $types[$form_values['type_name']];
  $field = $type->fields[$form_values['field_name']];
  $field_types = _content_field_types();
  $field_type = $field_types[$field['type']];

  $instance_settings = array();
  foreach (module_invoke($field_type['module'], 'field_settings', 'save', $field, 'instance') as $setting) {
    $instance_settings[$setting] = $form_values[$setting];
  }
  $global_settings = array();
  foreach (module_invoke($field_type['module'], 'field_settings', 'save', $field, 'global') as $setting) {
    $global_settings[$setting] = $form_values[$setting];
  }

  db_query("UPDATE {node_field_instance} SET weight = %d, label = '%s', instance_settings = '%s' WHERE type_name = '%s' AND field_name = '%s'", $form_values['weight'], $form_values['label'], serialize($instance_settings), $form_values['type_name'], $form_values['field_name']);

  db_query("UPDATE {node_field} SET required = %d, multiple = %d, global_settings = '%s' WHERE field_name = '%s'", $form_values['required'], $form_values['multiple'], serialize($global_settings), $form_values['field_name']);

  drupal_set_message(t('Saved field %field.', array('%field' => theme('placeholder', $form_values['label']))));
  cache_clear_all('content_types');
  drupal_goto('admin/node/types/'. $form_values['type_name'] .'/fields');
}


/**
 * Invoke a field hook.
 */
function _content_field_invoke($op, &$node, $a2 = NULL, $a3 = NULL, $a4 = NULL) {
  $type_name = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  $types = _content_types();
  $type = $types[$type_name];
  $field_types = _content_field_types();

  $return = array();
  foreach ($type->fields as $field) {
    $module = $field_types[$field['type']]['module'];
    $function = $module .'_field';
    if (function_exists($function)) {
      $result = $function($op, $node, $field, $a2, $a3, $a4);
      if (is_array($result)) {
        $return = array_merge($return, $result);
      }
      else if (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}

/**
 * Return a list of all content types.
 */
function _content_types() {
  static $types;

  if (!isset($types)) {
    if ($cached = cache_get('content_types')) {
      $types = unserialize($cached->data);
    }
    else {
      $types = array();
      $type_result = db_query('SELECT * FROM {node_type} nt WHERE 1 ORDER BY nt.type_name ASC');
      while ($type = db_fetch_object($type_result)) {
        $type->fields = array();
        $field_result = db_query("SELECT nfi.field_name, nfi.weight, nfi.label, nfi.instance_settings, nf.type, nf.global_settings, nf.required, nf.multiple FROM {node_field_instance} nfi LEFT JOIN {node_field} nf ON nfi.field_name = nf.field_name WHERE nfi.type_name = '%s' ORDER BY nfi.weight ASC, nfi.label ASC", $type->type_name);
        while ($field = db_fetch_array($field_result)) {
          $global_settings = $field['global_settings'] ? unserialize($field['global_settings']) : array();
          $instance_settings = $field['instance_settings'] ? unserialize($field['instance_settings']) : array();
          unset($field['global_settings']);
          unset($field['instance_settings']);
          $field = array_merge($field, $global_settings, $instance_settings);
          $type->fields[$field['field_name']] = $field;
        }

        $types[$type->type_name] = $type;
      }

      cache_set('content_types', serialize($types), CACHE_PERMANENT);
    }
  }

  return $types;
}

/**
 * Return a list of all fields.
 */
function _content_fields() {
  static $fields;

  if (!isset($fields)) {
    $fields = array();
    $field_result = db_query('SELECT * FROM {node_field} nf');
    while ($field = db_fetch_array($field_result)) {
      $global_settings = $field['global_settings'] ? unserialize($field['global_settings']) : array();
      unset($field['global_settings']);
      $field = array_merge($field, $global_settings);
      $field['label'] = db_result(db_query("SELECT label FROM {node_field_instance} WHERE field_name = '%s'", $field['field_name']));
      $fields[$field['field_name']] = $field;
    }
  }

  return $fields;
}

/**
 * Return a list of field types.
 */
function _content_field_types() {
  static $types;

  if (!isset($types)) {
    $types = array();
    foreach (module_list() as $module) {
      $module_types = module_invoke($module, 'field_info');
      if ($module_types) {
        foreach ($module_types as $name => $info) {
          $types[$name] = $info;
          $types[$name]['module'] = $module;
        }
      }
    }
  }

  return $types;
}

?>
