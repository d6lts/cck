<?php
// $Id$

/**
 * @file
 * Allows administrators to define new content types.
 */

/**
 * Implementation of hook_help().
 */
function content_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows administrators to define new content types.');
  }

  if (strpos($section, 'node/add') === 0) {
    $types = _content_types();
    foreach ($types as $type_name => $type) {
      if ($section == 'node/add#' . $type_name) {
        return t($types[$type_name]->description);
      }
      if ($section == 'node/add/' . $type_name) {
        return t($types[$type_name]->help);
      }
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function content_perm() {
  $perms = array('administer content types');
  foreach (_content_types() as $name => $type) {
    $perms[] = 'create '. $name .' content';
    $perms[] = 'edit own '. $name .' content';
  }
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function content_menu($may_cache) {
  $items = array();
  $access = user_access('administer content types');
  
  // Only include administrative callbacks if we are viewing an admin page.
  if (arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'types') {
    include_once(drupal_get_path('module', 'content') .'/content_admin.inc');
  }

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/node/types',
      'title' => t('content types'),
      'callback' => '_content_admin_type_overview',
      'access' => $access,
    );
    $items[] = array(
      'path' => 'admin/node/types/list',
      'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
    $items[] = array(
      'path' => 'admin/node/types/add',
      'title' => t('add content type'),
      'callback' => '_content_admin_type_edit',
      'access' => $access,
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'admin/node/types/fields',
      'title' => t('fields'),
      'callback' => '_content_admin_type_fields',
      'access' => $access,
      'type' => MENU_LOCAL_TASK,
    );

    $types = _content_types();
    foreach ($types as $type_name => $type) {
      $items[] = array(
        'path' => 'node/add/'. $type_name,
        'title' => t($type->label),
        'access' => user_access('create '. $type_name .' content'),
      );
    }
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'node' && arg(2) == 'types' && arg(3)) {

      $types = _content_types();

      if (isset($types[arg(3)])) {
        $items[] = array(
          'path' => 'admin/node/types/'. arg(3),
          'title' => t($types[arg(3)]->label),
          'callback' => '_content_admin_type_edit',
          'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'path' => 'admin/node/types/'. arg(3) .'/delete',
          'title' => t('delete'),
          'callback' => '_content_admin_type_delete',
          'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_CALLBACK,
        );
        $items[] = array(
          'path' => 'admin/node/types/'. arg(3) .'/duplicate',
          'title' => t('duplicate'),
          'callback' => '_content_admin_type_edit',
          'access' => $access,
          'callback arguments' => array('', arg(3)),
          'type' => MENU_CALLBACK,
        );

        $items[] = array(
          'path' => 'admin/node/types/'. arg(3) .'/edit',
          'title' => t('edit'),
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => -10,
        );

        $items[] = array(
          'path' => 'admin/node/types/'. arg(3) .'/fields',
          'title' => t('manage fields'),
          'callback' => '_content_admin_field_overview',
          'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_LOCAL_TASK,
          'weight' => 1,
        );
        $items[] = array(
          'path' => 'admin/node/types/'. arg(3) .'/add_field',
          'title' => t('add field'),
          'callback' => '_content_admin_field_add',
          'access' => $access,
          'callback arguments' => array(arg(3)),
          'type' => MENU_LOCAL_TASK,
          'weight' => 2,
        );

        if (arg(4) == 'fields' && arg(5)
            && isset($types[arg(3)]->fields[arg(5)])) {
          $items[] = array(
            'path' => 'admin/node/types/'. arg(3) .'/fields/'. arg(5),
            'title' => t($types[arg(3)]->fields[arg(5)]['widget']['label']),
            'callback' => '_content_admin_field',
            'access' => $access,
            'callback arguments' => array(arg(3), arg(5)),
            'type' => MENU_CALLBACK,
          );
          $items[] = array(
            'path' => 'admin/node/types/'. arg(3) .'/fields/'. arg(5) .'/remove',
            'title' => t('remove field'),
            'callback' => '_content_admin_field_remove',
            'access' => $access,
            'callback arguments' => array(arg(3), arg(5)),
            'type' => MENU_CALLBACK,
          );
        }

      }
    }
  }

  return $items;
}

/**
 * Implementation of hook_node_info().
 */
function content_node_info() {
  $types = array();
  foreach (_content_types() as $name => $type) {
    $types[$name] = array('name' => t($type->label), 'base' => 'content');
  }
  return $types;
}

/**
 * Implementation of hook_access().
 */
function content_access($op, $node) {
  global $user;
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);

  if ($op == 'create') {
    return user_access('create '. $type .' content');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own '. $type .' content') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_load().
 */
function content_load($node) {
  $cid = 'content:'. $node->nid;
  if ($cached = cache_get($cid)) {
    return unserialize($cached->data);
  }
  else {
    $additions = _content_field_invoke('load', $node);
    cache_set($cid, serialize($additions), CACHE_PERMANENT);
    return $additions;
  }
}

/**
 * Implementation of hook_insert().
 */
function content_insert($node) {
  _content_field_invoke('insert', $node);
}

/**
 * Implementation of hook_update().
 */
function content_update($node) {
  _content_field_invoke('update', $node);
  cache_clear_all('content:'. $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function content_delete($node) {
  _content_field_invoke('delete', $node);
  cache_clear_all('content:'. $node->nid);
}

/**
 * Implementation of hook_form().
 */
function content_form(&$node, &$param) {
  $form = array();
  $types = _content_types();
  $type = $types[$node->type];

  // Set form parameters so we can accept file uploads.
  $form['#attributes'] = array("enctype" => "multipart/form-data");

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );
  $form = array_merge($form, _content_widget_invoke('form', $node));

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function content_validate(&$node) {
  _content_widget_invoke('validate', $node);
}

/**
 * Implementation of hook_submit().
 */
function content_submit(&$node) {
  _content_widget_invoke('submit', $node);
}

/**
 * Implementation of hook_view().
 */
function content_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node->body = implode(_content_field_invoke('view', $node, $teaser, $page));
  $node->teaser = implode(_content_field_invoke('view', $node, $teaser, $page));
  $node->readmore = ($node->body != $node->teaser);
}


/**
 * Invoke a field hook.
 */
function _content_field_invoke($op, &$node, $a2 = NULL, $a3 = NULL, $a4 = NULL) {
  $type_name = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  $types = _content_types();
  $type = $types[$type_name];
  $field_types = _content_field_types();

  $return = array();
  foreach ($type->fields as $field) {
    $module = $field_types[$field['type']]['module'];
    $function = $module .'_field';
    if (function_exists($function)) {
      $result = $function($op, $node, $field, $a2, $a3, $a4);
      if (is_array($result)) {
        $return = array_merge($return, $result);
      }
      else if (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}

/**
 * Invoke a field hook.
 */
function _content_widget_invoke($op, &$node) {
  $type_name = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  $types = _content_types();
  $type = $types[$type_name];
  $widget_types = _content_widget_types();

  $return = array();
  foreach ($type->fields as $field) {
    $module = $widget_types[$field['widget']['type']]['module'];
    $function = $module .'_widget';
    if (function_exists($function)) {
      $result = $function($op, $node, $field);
      if (is_array($result)) {
        $return = array_merge($return, $result);
      }
      else if (isset($result)) {
        $return[] = $result;
      }
    }
  }

  return $return;
}

/**
 * Return a list of all content types.
 */
function _content_types() {
  static $types;

  if (!isset($types)) {
    if ($cached = cache_get('content_types')) {
      $types = unserialize($cached->data);
    }
    else {
      $types = array();
      $type_result = db_query('SELECT * FROM {node_type} nt ORDER BY nt.type_name ASC');
      while ($type = db_fetch_object($type_result)) {
        $type->fields = array();
        $field_result = db_query("SELECT nfi.field_name, nfi.weight, nfi.label, nfi.widget_type, nfi.widget_settings, nf.type, nf.global_settings, nf.required, nf.multiple FROM {node_field_instance} nfi LEFT JOIN {node_field} nf ON nfi.field_name = nf.field_name WHERE nfi.type_name = '%s' ORDER BY nfi.weight ASC, nfi.label ASC", $type->type_name);
        while ($field = db_fetch_array($field_result)) {
          $field_settings = $field['global_settings'] ? unserialize($field['global_settings']) : array();
          $widget_settings = $field['widget_settings'] ? unserialize($field['widget_settings']) : array();
          unset($field['global_settings']);
          unset($field['widget_settings']);
          $field = array_merge($field, $field_settings);
          $field['widget'] = $widget_settings;
          $field['widget']['type'] = $field['widget_type'];
          unset($field['widget_type']);
          $field['widget']['weight'] = $field['weight'];
          unset($field['weight']);
          $field['widget']['label'] = $field['label'];
          unset($field['label']);
          $type->fields[$field['field_name']] = $field;
        }

        $types[$type->type_name] = $type;
      }

      cache_set('content_types', serialize($types), CACHE_PERMANENT);
    }
  }

  return $types;
}

/**
 * Return a list of all fields.
 */
function _content_fields() {
  static $fields;

  if (!isset($fields)) {
    $fields = array();
    $field_result = db_query('SELECT * FROM {node_field} nf');
    while ($field = db_fetch_array($field_result)) {
      $global_settings = $field['global_settings'] ? unserialize($field['global_settings']) : array();
      unset($field['global_settings']);
      $field = array_merge($field, $global_settings);
      $field['widget']['label'] = db_result(db_query("SELECT label FROM {node_field_instance} WHERE field_name = '%s'", $field['field_name']));
      $fields[$field['field_name']] = $field;
    }
  }

  return $fields;
}

/**
 * Return a list of field types.
 */
function _content_field_types() {
  static $types;

  if (!isset($types)) {
    $types = array();
    foreach (module_list() as $module) {
      $module_types = module_invoke($module, 'field_info');
      if ($module_types) {
        foreach ($module_types as $name => $info) {
          $types[$name] = $info;
          $types[$name]['module'] = $module;
        }
      }
    }
  }

  return $types;
}

/**
 * Return a list of widget types.
 */
function _content_widget_types() {
  static $types;

  if (!isset($types)) {
    $types = array();
    foreach (module_list() as $module) {
      $module_types = module_invoke($module, 'widget_info');
      if ($module_types) {
        foreach ($module_types as $name => $info) {
          $types[$name] = $info;
          $types[$name]['module'] = $module;
        }
      }
    }
  }

  return $types;
}

/**
 * Clear the cache of content_types; called in several places when
 * content information is changed.
 */
function content_clear_type_cache() {
  cache_clear_all('content_types');
  if (module_exist('views')) {
    views_invalidate_cache();
  }
}
