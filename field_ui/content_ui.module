<?php
// $Id$
/**
 * @file
 * Allows administrators to associate custom fields to content types.
 */

/**
 * Implementation of hook_help().
 */
function content_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/help#content':
      $output = '<p>'. t('The content module, a required component of the Content Construction Kit (CCK), allows administrators to associate custom fields with content types. In Drupal, content types are used to define the characteristics of a post, including the title and description of the fields displayed on its add and edit pages. Using the content module (and the other helper modules included in CCK), custom fields beyond the default "Title" and "Body" may be added. CCK features are accessible through tabs on the <a href="@content-types">content types administration page</a>. (See the <a href="@node-help">node module help page</a> for more information about content types.)', array('@content-types' => url('admin/build/types'), '@node-help' => url('admin/help/node'))) .'</p>';
      $output .= '<p>'. t('When adding a custom field to a content type, you determine its type (whether it will contain text, numbers, or references to other objects) and how it will be displayed (either as a text field or area, a select box, checkbox, radio button, or autocompleting field). A field may have multiple values (i.e., a "person" may have multiple e-mail addresses) or a single value (i.e., an "employee" has a single employee identification number). As you add and edit fields, CCK automatically adjusts the structure of the database as necessary. CCK also provides a number of other features, including intelligent caching for your custom data, an import and export facility for content type definitions, and integration with other contributed modules.') .'</p>';
      $output .= '<p>'. t('Custom field types are provided by a set of optional modules included with CCK (each module provides a different type). The <a href="@modules">modules page</a> allows you to enable or disable CCK components. A default installation of CCK includes:', array('@modules' => url('admin/build/modules'))) .'</p>';
      $output .= '<ul>';
      $output .= '<li>'. t('<em>number</em>, which adds numeric field types, in integer, decimal or floating point form. You may define a set of allowed inputs, or specify an allowable range of values. A variety of common formats for displaying numeric data are available.') .'</li>';
      $output .= '<li>'. t("<em>text</em>, which adds text field types. A text field may contain plain text only, or optionally, may use Drupal's input format filters to securely manage rich text input. Text input fields may be either a single line (text field), multiple lines (text area), or for greater input control, a select box, checkbox, or radio buttons. If desired, CCK can validate the input to a set of allowed values.") .'</li>';
      $output .= '<li>'. t('<em>nodereference</em>, which creates custom references between Drupal nodes. By adding a <em>nodereference</em> field and two different content types, for instance, you can easily create complex parent/child relationships between data (multiple "employee" nodes may contain a <em>nodereference</em> field linking to an "employer" node).') .'</li>';
      $output .= '<li>'. t('<em>userreference</em>, which creates custom references to your sites\' user accounts. By adding a <em>userreference</em> field, you can create complex relationships between your site\'s users and posts. To track user involvement in a post beyond Drupal\'s standard <em>Authored by</em> field, for instance, add a <em>userreference</em> field named "Edited by" to a content type to store a link to an editor\'s user account page.') .'</li>';
      $output .= '<li>'. t('<em>fieldgroup</em>, which creates collapsible fieldsets to hold a group of related fields. A fieldset may either be open or closed by default. The order of your fieldsets, and the order of fields within a fieldset, is managed via a drag-and-drop interface provided by content module.') .'</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@handbook-cck">CCK</a> or the <a href="@project-cck">CCK project page</a>.', array('@handbook-cck' => 'http://drupal.org/handbook/modules/cck', '@project-cck' => 'http://drupal.org/project/cck')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function content_ui_perm() {
  return array('Use PHP input for field settings (dangerous - grant with care)');
}

/**
 * Implementation of hook_init().
 */
function content_ui_init() {
  // TODO D7 : be smarter ?
  drupal_add_css(drupal_get_path('module', 'content_ui') .'/theme/content_ui.css');
}

/**
 * Implementation of hook_menu_alter().
 */
function content_ui_menu_alter(&$items) {
  // Customize the content types page with our own callback
  $items['admin/build/types']['page callback'] = 'content_types_overview';
  $items['admin/build/types']['file'] = 'content_ui.admin.inc';
  $items['admin/build/types']['file path'] = drupal_get_path('module', 'content_ui') .'/includes';
}

/**
 * Implementation of hook_menu().
 */
function content_ui_menu() {
  $items = array();
  $items['admin/build/types/fields'] = array(
    'title' => 'Fields',
    'page callback' => 'content_fields_list',
    'access arguments' => array('administer content types'),
    'file' => 'includes/content.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Make sure this doesn't fire until content_types is working,
  // and tables are updated, needed to avoid errors on initial installation.
  if (!defined('MAINTENANCE_MODE')) {
    foreach (node_get_types() as $type) {
      $type_name = $type->type;
      $content_type = content_types($type_name);
      $type_url_str = $content_type['url_str'];
      $items['admin/build/node-type/'. $type_url_str .'/fields'] = array(
        'title' => 'Manage fields',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('content_field_overview_form', $type_name),
        'access arguments' => array('administer content types'),
        'file' => 'includes/content.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 1,
      );
      $items['admin/build/node-type/'. $type_url_str .'/display'] = array(
        'title' => 'Display fields',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('content_display_overview_form', $type_name),
        'access arguments' => array('administer content types'),
        'file' => 'includes/content.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
      );
      $contexts = content_build_modes('_tabs');
      foreach ($contexts as $key => $tab) {
        $items['admin/build/node-type/'. $type_url_str .'/display/'. $key] = array(
          'title' => $tab['title'],
          'page arguments' => array('content_display_overview_form', $type_name, $key),
          'access arguments' => array('administer content types'),
          'type' => $key == 'basic' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
          'weight' => $key == 'basic' ? 0 : 1,
        );
      }
      // Cast as an array in case this is called before any fields have
      // been added, like when a new content type is created.
      foreach ((array) $content_type['instances'] as $instance) {
        $field_name = $instance['field_name'];
        $items['admin/build/node-type/'. $type_url_str .'/fields/'. $field_name] = array(
          'title' => $instance['widget']['label'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array('content_field_edit_form', $type_name, $field_name),
          'access arguments' => array('administer content types'),
          'file' => 'includes/content.admin.inc',
          'type' => MENU_LOCAL_TASK,
        );
        $items['admin/build/node-type/'. $type_url_str .'/fields/'. $field_name .'/remove'] = array(
          'title' => 'Remove field',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('content_field_remove_form', $type_name, $field_name),
          'access arguments' => array('administer content types'),
          'file' => 'includes/content.admin.inc',
          'type' => MENU_CALLBACK,
        );
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function content_ui_theme() {
  $path = drupal_get_path('module', 'content_ui') .'/theme';
  require_once "./$path/theme.inc";

  return array(
    'content_overview_links' => array(
      'arguments' => array(),
    ),
    'content_field_overview_form' => array(
      'template' => 'content-admin-field-overview-form',
      'file' => 'theme.inc',
      'path' => $path,
      'arguments' => array('form' => NULL),
    ),
    'content_display_overview_form' => array(
      'template' => 'content-admin-display-overview-form',
      'file' => 'theme.inc',
      'path' => $path,
      'arguments' => array('form' => NULL),
    ),
    'content_multiple_values' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementataion of content_nodeapi_view.
 */
function content_ui_nodeapi_view(&$node, $teaser = FALSE, $page = FALSE) {
  // Prevent against invalid 'nodes' built by broken 3rd party code.
  if (isset($node->type)) {
    $type = content_types($node->type);
    // TODO D7 : storage for extra settings...
    foreach ($type['extra'] as $key => $value) {
      // Some core 'fields' use a different key in node forms and in 'view'
      // render arrays.
      if (isset($value['view']) && isset($node->content[$value['view']])) {
        $node->content[$value['view']]['#weight'] = $value['weight'];
      }
      elseif (isset($node->content[$key])) {
        $node->content[$key]['#weight'] = $value['weight'];
      }
    }
  }
}

/**
 *  Implementation of hook_form_alter().
 */
function content_ui_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $type = content_types($form['#node']->type);
    // TODO D7 : storage for extra settings...
    // Adjust weights for non-field elements.
    foreach ($type['extra'] as $key => $value) {
      if (isset($form[$key])) {
        $form[$key]['#weight'] = $value['weight'];
      }
    }
  }
}

 /**
 * Hide specified fields from the $content variable in node templates.
 */
// TODO D7 : ??
function content_field_wrapper_post_render($content, $element) {
  $fields = content_fields();
  $field = $fields[$element['#field_name']];
  if (theme('content_exclude', $content, $field, $element['#context'])) {
    return '';
  }
  return $content;
}

/**
 * Implementation of hook_content_extra_fields.
 *
 * Informations for non-CCK 'node fields' defined in core.
 */
function content_ui_content_extra_fields($type_name) {
  $type = node_get_types('type', $type_name);
  $extra = array();

  if ($type->has_title) {
    $extra['title'] = array(
      'label' => $type->title_label,
      'description' => t('Node module form.'),
      'weight' => -5
    );
  }
  if ($type->has_body) {
    $extra['body_field'] = array(
      'label' => $type->body_label,
      'description' => t('Node module form.'),
      'weight' => 0,
      'view' => 'body'
    );
  }
  if (module_exists('locale') && variable_get("language_content_type_$type_name", 0)) {
    $extra['language'] = array(
      'label' => t('Language'),
      'description' => t('Locale module form.'),
      'weight' => 0
    );
  }
  if (module_exists('menu')) {
    $extra['menu'] = array(
      'label' => t('Menu settings'),
      'description' => t('Menu module form.'),
      'weight' => -2
    );
  }
  if (module_exists('taxonomy') && taxonomy_get_vocabularies($type_name)) {
    $extra['taxonomy'] = array(
      'label' => t('Taxonomy'),
      'description' => t('Taxonomy module form.'),
      'weight' => -3
    );
  }
  if (module_exists('upload') && variable_get("upload_$type_name", TRUE)) {
    $extra['attachments'] = array(
      'label' => t('File attachments'),
      'description' => t('Upload module form.'),
      'weight' => 30,
      'view' => 'files'
    );
  }

  return $extra;
}

/**
 * Retrieve the user-defined weight for non-CCK node 'fields'.
 *
 * CCK's 'Manage fields' page lets users reorder node fields, including non-CCK
 * items (body, taxonomy, other hook_nodeapi-added elements by contrib modules...).
 * Contrib modules that want to have their 'fields' supported need to expose
 * them with hook_content_extra_fields, and use this function to retrieve the
 * user-defined weight.
 *
 * @param $type_name
 *   The content type name.
 * @param $pseudo_field_name
 *   The name of the 'field'.
 * @return
 *   The weight for the 'field', respecting the user settings stored
 *   by content.module.
 */
function content_ui_extra_field_weight($type_name, $pseudo_field_name) {
  // TODO D7 : storage ?
  $type = content_types($type_name);

  // If we don't have the requested item, this may be because the cached
  // information for 'extra' fields hasn't been refreshed yet.
  if (!isset($type['extra'][$pseudo_field_name])) {
    content_clear_type_cache();
  }

  if (isset($type['extra'][$pseudo_field_name])) {
    return $type['extra'][$pseudo_field_name]['weight'];
  }
}



/**
 *  Implementation of hook_node_type()
 */
function content_ui_node_type($op, $info) {
  switch ($op) {
    case 'update':
      if ($extra = variable_get('content_extra_weights_'. $info->old_type, array())) {
        variable_set('content_extra_weights_'. $info->type, $extra);
        variable_del('content_extra_weights_'. $info->old_type);
      }
      break;
    case 'delete':
      variable_del('content_extra_weights_'. $info->type);
      break;
  }
}
