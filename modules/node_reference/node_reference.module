<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing one node from another.
 */

/**
 * Implements hook_menu().
 */
function node_reference_menu() {
  $items = array();
  $items['node_reference/autocomplete'] = array(
    'title' => 'node_reference autocomplete',
    'page callback' => 'node_reference_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function node_reference_field_info() {
  return array(
    'node_reference' => array(
      'label'             => t('Node reference'),
      'description'       => t('This field stores the ID of a related node as an integer value.'),
      'settings'          => array('referenceable_types' => array()),
      // It probably make more sense to have the referenceable types be per-field than per-instance
      // 'instance settings' => array('referenceable_types' => array()),
      'default_widget'    => 'options_select', //  node_reference_autocomplete',
      'default_formatter' => 'node_reference_default',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function node_reference_field_schema($field) {
  $columns = array(
    'nid' => array(
      'type'     => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('nid' => array('nid')), // useful to find back-references
  );
}

/**
 * Implements hook_field_settings_form().
 */
function node_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();
  $form['referenceable_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Content types that can be referenced'),
    '#multiple'      => TRUE,
    '#default_value' => is_array($settings['referenceable_types'])
       ? $settings['referenceable_types']
       : array(),
    '#options'       => array_map('check_plain', node_type_get_names()),
    '#disabled'      => $has_data,
  );
  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_nid': nid is not valid for the field (not a valid node id, or the node is not referenceable).
 */
function node_reference_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
  // Extract nids to check.
  $ids = array();

  // First check non-numeric "nid's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['nid'])) {
      if (is_numeric($item['nid'])) {
        $ids[] = $item['nid'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_nid',
          'message' => t("%name: invalid input.",
             array('%name' => t($field['widget']['label']))),
        );
      }
    }
  }
  // Prevent performance hog if there are no ids to check.
  if ($ids) {
    $refs = _node_reference_potential_references($field, '', NULL, $ids);
    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['nid']) && !isset($refs[$item['nid']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_nid',
            'message' => t("%name: this post can't be referenced.",
              array('%name' => t($field['widget']['label']))),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function node_reference_field_is_empty($item, $field) {
  // nid = 0 Ã®s empty too, which is exactly what we want.
  return empty($item['nid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function node_reference_field_formatter_info() {
  $ret = array(
    'node_reference_default' => array(
      'label'       => t('Title (link)'),
      'description' => t('Display the title of the referenced node as a link to the node page.'),
      'field types' => array('node_reference'),
    ),
    'node_reference_plain' => array(
      'label'       => t('Title (no link)'),
      'description' => t('Display the title of the referenced node as plain text.'),
      'field types' => array('node_reference'),
    ),
    'node_reference_full' => array(
      'label'       => t('Full node'),
      'description' => t('Display the title of the referenced node as a full node view.'),
      'field types' => array('node_reference'),
    ),
    'node_reference_teaser' => array(
      'label'       => t('Teaser'),
      'description' => t('Display the title of the referenced node as a teaser node view.'),
      'field types' => array('node_reference'),
    ),
  );
  return $ret;
}

/**
 * Theme function for 'default' node_reference field formatter.
 */
function theme_field_formatter_node_reference_default($variables) {
  $element = $variables['element'];
  if (!empty($element['#item']['nid']) && is_numeric($nid = $element['#item']['nid'])
  && ($title = _node_reference_titles($nid))) {
    $ret = l($title, 'node/' . $nid);
  }
  else {
    $ret = '';
  }
  return $ret;
}

/**
 * Theme function for 'plain' node_reference field formatter.
 */
function theme_field_formatter_node_reference_plain($variables) {
  $element = $variables['element'];
  if (!empty($element['#item']['nid']) && is_numeric($nid = $element['#item']['nid'])
  && ($title = _node_reference_titles($nid))) {
    $ret = check_plain($title);
  }
  else {
    $ret = '';
  }
  return $ret;
}

/**
 * Theme function for 'full node' node_reference field formatter.
 */
function theme_field_formatter_node_reference_full($variables) {
  return _node_reference_node_formatter($variables);
}

/**
 * Theme function for 'teaser' node_reference field formatter.
 */
function theme_field_formatter_node_reference_teaser($variables) {
  return _node_reference_node_formatter($variables);
}

/**
 * Actual implementation for 'full' and 'teaser' node_reference field formatters.
 * @see theme_field_formatter_node_reference_full().
 * @see theme_field_formatter_node_reference_teaser().
 *
 * @param $variables
 * @return string
 */
function _node_reference_node_formatter($variables) {
  static $recursion_queue = array();

  $element = $variables['element'];
  $ret = '';

  if (!empty($element['#item']['nid']) && is_numeric($nr_nid = $element['#item']['nid'])) {
    $node = $element['#object'];
    $field = field_info_field($element['#field_name']);

    // If no 'referencing node' is set, we are starting a new 'reference
    // thread'. This is not redundant with the array() initializer on
    // $recursion queue, because the formatter may be invoked several times
    // during a single page cycle, when multiple node references have to be
    // displayed, and the initializer only covers the first.
    if (!isset($node->referencing_node)) {
      $recursion_queue = array();
    }

    $recursion_queue[] = $node->nid;
    if (in_array($nr_nid, $recursion_queue)) {
      // Prevent infinite recursion caused by reference cycles: if the node has
      // already been rendered earlier in this 'thread', fall back to 'default'
      // (node title) formatter.
      $ret = theme('field_formatter_node_reference_default', $variables);
    }
    elseif ($referenced_node = node_load($nr_nid)) {
      $referenced_node->referencing_node = $node;
      $referenced_node->referencing_field = $field;
      _node_reference_titles($nr_nid, $referenced_node->title);
      // other values: 'node_reference_teaser'
      $build_mode = ($element['#formatter'] == 'node_reference_full')
        ? 'full'
        : 'teaser';
      $ret = node_build($referenced_node, $build_mode);
      $ret = drupal_render($ret);
    }
  }

  return $ret;
}

/**
 * Helper function for formatters.
 *
 * Store node titles collected in the curent request.
 */
function _node_reference_titles($nid, $known_title = NULL) {
  static $titles = array();

  if (!isset($titles[$nid])) {
    if ($known_title) {
      $title = $known_title;
    }
    else {
      $q = db_select('node', 'n');
      $node_title_alias = $q->addField('n', 'title');
      $q->addTag('node_access')
        ->condition('n.nid', $nid)
        ->range(0, 1);
      $result = $q->execute();
      $title = $result->fetchField();
    }
  $titles[$nid] = $title ? $title : '';
  }

  return $titles[$nid];
}

/**
 * Implements hook_field_widget_info().
 */
function node_reference_field_widget_info() {
  return array(
    'node_reference_autocomplete' => array(
      'label'       => t('Autocomplete text field'),
      'description' => t('Display the list of referenceable nodes as a textfield with autocomplete behaviour.'),
      'field types' => array('node_reference'),
      'settings'    => array(
        'autocomplete_match' => 'contains',
        'size'               => 60,
        'autocomplete_path' => 'node_reference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function node_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'node_reference';
  $info['options_buttons']['field types'][] = 'node_reference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function node_reference_field_widget_settings_form($field, $instance) {
  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  if ($widget['type'] == 'node_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type'             => 'select',
      '#title'            => t('Autocomplete matching'),
      '#default_value'    => $settings['autocomplete_match'],
      '#options'          => array(
        'starts_with'     => t('Starts with'),
        'contains'        => t('Contains'),
      ),
      '#description'      => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type'             => 'textfield',
      '#title'            => t('Size of textfield'),
      '#default_value'    => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required'         => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget().
 */
function node_reference_field_widget(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'node_reference_autocomplete':
      $element += array(
        '#type'              => 'textfield',
        '#default_value'     => isset($items[$delta]) ? $items[$delta] : NULL,
        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
        '#size'              => $instance['widget']['settings']['size'],
        '#element_validate'  => array('node_reference_autocomplete_validate'),
        '#input'             => TRUE, // allow #value_callback to be invoked
        '#value_callback'    => 'node_reference_autocomplete_value',
      );
      break;
  }

  return $element;
}

/**
 * Value for a node_reference autocomplete element.
 *
 * Replace the node title with a node nid.
 */
function node_reference_autocomplete_value($element, $edit = FALSE, $form_state) {
  if (!empty($element['#default_value'])) {
    $nid = $element['#default_value'];

    $q = db_select('node', 'n');
    $node_title_alias = $q->addField('n', 'title');
    $q->addTag('node_access')
      ->condition('n.nid', $nid)
      ->range(0, 1);
    $result = $q->execute();

    $value = $result->fetchField();
    $value .= ' [nid:'. $nid .']';
  }
  else {
    $value = NULL;
  }
  return $value;
}

/**
 * Validate an autocomplete element.
 */
function node_reference_autocomplete_validate($element, &$form_state, $form) {
  $value = $element['#value']['nid'];
  $nid = NULL;
  if (!empty($value)) {
    $field_name = $element['#field_name'];
    $instance = field_info_instance('node', $field_name, $element['#bundle']);
    preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit [nid:n].
      list(, $title, $nid) = $matches;
      if (!empty($title) && ($n = node_load($nid)) && $title != $n->title[LANGUAGE_NONE][0]['value']) {
        form_error($element['nid'], t('%name: title mismatch. Please check your selection.', array('%name' => t($instance['label']))));
      }
    }
    else {
      // No explicit nid.
      $field = field_info_field($field_name);
      $reference = _node_reference_potential_references($field, $value, 'equals', NULL, 1);
      if (empty($reference)) {
        form_error($element['nid'], t('%name: found no valid post with that title.', array('%name' => t($instance['label']))));
      }
      else {
        // TODO: the best thing would be to present the user with an
        // additional form, allowing the user to choose between valid
        // candidates with the same title. ATM, we pick the first
        // matching candidate...
        $nid = key($reference);
      }
    }
  }
  form_set_value($element, $nid, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function nodereference_field_widget_error($element, $error) {
  form_error($element['nid'], $error['message']);
}

/**
 * Fetch an array of all candidate referenced nodes.
 *
 * This info is used in various places (allowed values, autocomplete
 * results, input validation...). Some of them only need the nids,
 * others nid + titles, others yet nid + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets consumers use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered name against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional node ids to lookup (the $string and $match arguments will be
 *   ignored).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid nodes in the form:
 *   array(
 *     nid => array(
 *       'title' => The node title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function _node_reference_potential_references($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  static $results = array();

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $match . ':'
    . ($string !== '' ? $string : implode('-', $ids))
    . ':' . $limit;
  if (!isset($results[$cid])) {
    $references = _node_reference_potential_references_standard($field, $string, $match, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * Helper function for _node_reference_potential_references().
 *
 * List of referenceable nodes defined by content types.
 */
function _node_reference_potential_references_standard($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  // Avoid useless work
  if (!count($field['settings']['referenceable_types'])) {
    return array();
  }

  $query = db_select('node', 'n');
  $node_nid_alias   = $query->addField('n', 'nid');
  $node_title_alias = $query->addField('n', 'title', 'node_title');
  $node_type_alias  = $query->addField('n', 'type',  'node_type');
  $query->addTag('node_access');

  if (is_array($field['settings']['referenceable_types'])) {
    $query->condition('n.type', $field['settings']['referenceable_types'], 'IN');
  }

  if ($string !== '') {
    $args = array();
    switch ($match) {
      case 'contains':
        $title_clause = 'n.title LIKE :match';
        $args['match'] = '%' . $string . '%';
        break;

      case 'starts_with':
        $title_clause = 'n.title LIKE :match';
        $args['match'] = $string . '%';
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $title_clause = 'n.title = :match';
        $args['match'] = $string;
        break;
    }
    $query->where($title_clause, $args);
  }
  elseif ($ids) {
    $query->condition($node_nid_alias, $ids, 'IN', $ids);
  }

  $query
    ->orderBy($node_title_alias)
    ->orderBy($node_type_alias);

  if ($limit) {
    $query->range(0, $limit);
  }

  $result = $query->execute();
  $references = array();
  foreach ($result->fetchAll() as $node) {
    $references[$node->nid] = array(
      'title'    => $node->node_title,
      'rendered' => check_plain($node->node_title),
    );
  }
  return $references;
}

/**
 * Menu callback for the autocomplete results.
 */
function node_reference_autocomplete($field_name, $string = '') {
  $field = field_info_field($field_name);

  $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
  $matches = array();

  $references = _node_reference_potential_references($field, $string, $match, array(), 10);
  foreach ($references as $id => $row) {
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] ." [nid:$id]"] = '<div class="reference-autocomplete">'. $row['rendered'] . '</div>';
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_node_type_update().
 *
 * Reflect type name changes to the 'referenceable types' settings: when
 * the name of a type changes, the change needs to be reflected in the
 * "referenceable types" setting for any node_reference field
 * referencing it.
 */
function node_reference_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $fields = field_info_fields();
    foreach ($fields as $field_name => $field) {
      if ($field['type'] == 'node_reference' && isset($field['settings']['referenceable_types'][$info->old_type])) {
        $field['settings']['referenceable_types'][$info->type] = empty($field['settings']['referenceable_types'][$info->old_type]) ? 0 : $info->type;
        unset($field['settings']['referenceable_types'][$info->old_type]);
        field_update_field($field);
      }
    }
  }
}

/**
 * Theme preprocess function.
 *
 * Allows specific node templates for nodes displayed as values of a
 * node_reference field with the 'full node' / 'teaser' formatters.
 */
function node_reference_preprocess_node(&$vars) {
  // The 'referencing_field' attribute of the node is added by the 'teaser'
  // and 'full node' formatters.
  if (!empty($vars['node']->referencing_field)) {
    $node = $vars['node'];
    $field = $node->referencing_field;
    $vars['template_files'][] = 'node-node_reference';
    $vars['template_files'][] = 'node-node_reference-' . $field['field_name'];
    $vars['template_files'][] = 'node-node_reference-' . $node->type;
    $vars['template_files'][] = 'node-node_reference-' . $field['field_name'] .'-'. $node->type;
  }
}

/**
 * Implements hook_field_prepare_translation().
 *
 * When preparing a translation, load any translations of existing
 * references.
 * TODO: Core doc: "This hook may or may not survive in Field API".
 * So it is currently not verified.
 */
function node_reference_field_prepare_translation($obj_type, $object, $field, $instance, $langcode, &$items) {
  $addition = array();
  $addition[$field['field_name']] = array();
  if (isset($object->translation_source->$field['field_name'])
  && is_array($object->translation_source->$field['field_name'])) {
    foreach ($object->translation_source->$field['field_name'] as $key => $reference) {
      $reference_node = node_load($reference['nid']);
      // Test if the referenced node type is translatable and, if so,
      // load translations if the reference is not for the current language.
      // We can assume the translation module is present because it invokes 'prepare translation'.
      if (translation_supported_type($reference_node->type)
      && !empty($reference_node->language)
      && $reference_node->language != $node->language
      && $translations = translation_node_get_translations($reference_node->tnid)) {
        // If there is a translation for the current language, use it.
        $addition[$field['field_name']][] = array(
          'nid' => isset($translations[$node->language])
            ? $translations[$node->language]->nid
            : $reference['nid'],
        );
      }
    }
  }

  return $addition;
}

/**
 * Implements hook_allowed_values().
 *
 * @see options_options()
 * @link http://drupal.org/node/639466 @endlink
 *
 * A problem with this function is that its result set can be as large
 * as the whole set of nodes on a site, which can be huge.
 *
 * @param array $field
 */
function node_reference_allowed_values($field) {
  $references = _node_reference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['rendered'];
  }
  return $options;
}
