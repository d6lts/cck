<?php
// $Id$

class PbsTestCase extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name'  => t('Per-bundle Storage tests'),
      'description'  => t("Test Per-bundle Storage module."),
      'group' => t('Field')
    );
  }

  function setUp() {
    parent::setUp('field_sql_storage', 'field', 'field_test', 'pbs');

    $this->createFieldAndInstance('card_1', 1);
    $this->createFieldAndInstance('card_4', 4);
  }

  function createFieldAndInstance($name, $cardinality) {
    $field = array('field_name' => $name, 'type' => 'test_field', 'cardinality' => $cardinality);
    field_create_field($field);
    $instance = array(
      'field_name' => $name,
      'bundle' => 'test_bundle',
      'label' => 'label',
      'description' => 'description',
      'weight' => 0,
      'settings' => array(
        'test_instance_setting' => $this->randomName(),
      ),
      'widget' => array(
        'type' => 'test_field_widget',
        'label' => 'Test Field',
        'settings' => array(
          'test_widget_setting' => $this->randomName(),
        )
      )
    );
    field_create_instance($instance);

    $this->fields[$name] = $field;
    $this->instances[$name] = $instance;
  }

  function testFieldAttachInsert() {
    $entity_type = 'field_test_entity';

    // Create 5 entities, each with as many values per field as it holds.
    for ($id = 0; $id < 5; ++$id) {
      $entity = field_test_entity_get_entity($id, $id, 'test_bundle');
      foreach ($this->fields as $field_name => $field) {
        $values = array();
        for ($delta = 0; $delta < $field['cardinality']; ++$delta) {
          $values[$delta]['value'] = mt_rand(0, 127);
        }
        $entity->$field_name = $values;
      }
      field_attach_insert($entity_type, $entity);
      $entities[$id] = $entity;
    }

    // Verify that all the rows in the bundle table were created correctly.
    $res = db_query('SELECT * FROM {'.pbs_tablename('test_bundle').'}');
    while ($row = db_fetch_array($res)) {
      $entity = $entities[$row['entity_id']];
      foreach ($this->fields as $field_name => $field) {
        for ($delta = 0; $delta < $field['cardinality']; ++$delta) {
          $this->assertEqual($entity->{$field_name}[$delta]['value'], $row["{$field_name}_value_$delta"], "Entity {$entity->ftid} field {$field_name} delta $delta is correct");
        }
      }
    }
  }
}