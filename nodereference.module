<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing one node from another.
 */

/**
 * Implementation of hook_help().
 */
function nodereference_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines a field type for referencing one node from another. <em>Note: Requires content.module.</em>');
  }
}

/**
 * Implementation of hook_menu().
 */
function nodereference_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'nodereference/autocomplete', 'title' => t('node reference autocomplete'),
      'callback' => 'nodereference_autocomplete', 'access' => user_access('access content'), 'type' => MENU_CALLBACK);
  }

  return $items;
}

/**
 * Implementation of hook_field_info().
 */
function nodereference_field_info() {
  return array(
    'nodereference' => array('label' => 'Node Reference'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function nodereference_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['referenceable_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Content types that can be referenced'),
        '#multiple' => TRUE,
        '#default_value' => $field['referenceable_types'],
        '#options' => node_get_types(),
      );
      return $form;

    case 'validate':
      break;

    case 'save':
      return array('referenceable_types');
  }
}

/**
 * Implementation of hook_field().
 */
function nodereference_field($op, &$node, $field, $a2, $a3, $a4) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT nfnd.field_nid FROM {node_field_nodereference_data} nfnd WHERE nfnd.vid = %d AND nfnd.field_name = '%s' ORDER BY delta", $node->vid, $field['field_name']);

      if ($field['multiple']) {
        $values = array();
        while ($value = db_fetch_object($result)) {
          $values[] = $value->field_nid;
        }
        $additions = array($field['field_name'] => array('relation' => $values));
      }
      else {
        $value = db_fetch_object($result);
        $additions = array($field['field_name'] => array('relation' => array($value->field_nid)));
      }

      return $additions;

    case 'view':
      $node_field = $node->$field['field_name'];

      $referenced_nodes = array();

      foreach ($node_field['relation'] as $referenced_nid) {
        $referenced_node = node_load(array('nid' => $referenced_nid));
        if ($referenced_node) {
          $referenced_nodes[] = '('. str_replace('content-', '', $referenced_node->type) .') '. l($referenced_node->title, 'node/'. $referenced_node->nid);
        }
      }

      $node_field['view'] = theme('item_list', $referenced_nodes);

      $node->$field['field_name'] = $node_field;
      return '<div class="'. $field['field_name'] .'">'. $node_field['view'] .'</div>';

    case 'insert':
      $node_field = $node->$field['field_name'];

      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          db_query("INSERT INTO {node_field_nodereference_data} (nid, vid, field_name, delta, field_nid) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $value);
        }
      }
      else {
        db_query("INSERT INTO {node_field_nodereference_data} (nid, vid, field_name, delta, field_nid) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $node_field['relation']);
      }
      break;

    case 'update':
      $node_field = $node->$field['field_name'];

      // Delete and insert, rather than update, in case a field was added.
      db_query("DELETE FROM {node_field_nodereference_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          if ($value) {
            db_query("INSERT INTO {node_field_nodereference_data} (nid, vid, field_name, delta, field_nid) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $value);
          }
        }
      }
      else {
        db_query("INSERT INTO {node_field_nodereference_data} (nid, vid, field_name, delta, field_nid) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], 0, $node_field['relation']);
      }
      return;

    case 'delete':
      // Delete using nid rather than vid to purge all revisions.
      db_query("DELETE FROM {node_field_nodereference_data} WHERE nid = %d AND field_name = '%s'", $node->nid, $field['field_name']);
      return;
  }
}


/**
 * Implementation of hook_widget_info().
 */
function nodereference_widget_info() {
  return array(
    'nodereference_select' => array(
      'label' => 'Select List',
      'field types' => array('nodereference'),
    ),
    'nodereference_autocomplete' => array(
      'label' => 'Autocomplete Text Field',
      'field types' => array('nodereference'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function nodereference_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      return array();

    case 'validate':
      break;

    case 'save':
      return array();
  }
}

/**
 * Implementation of hook_widget().
 */
function nodereference_widget($op, &$node, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $node_field = $node->$field['field_name'];

      $form[$field['field_name']] = array('#tree' => TRUE);

      if ($field['widget']['type'] == 'nodereference_autocomplete') {
        if ($field['multiple']) {

          foreach($node_field['relation'] as $delta => $value) {
            $display_value = db_result(db_query("SELECT n.title FROM {node} n WHERE n.nid = %d", $value));
            $form[$field['field_name']]['title'][$delta] = array(
              '#type' => 'textfield',
              '#title' => t($field['widget']['label']),
              '#maxlength' => 128,
              '#autocomplete_path' => 'nodereference/autocomplete/'. $field['field_name'],
              '#default_value' => $display_value ? $display_value : ''
            );
          }

          $form[$field['field_name']]['title'][$delta + 1] = array(
            '#type' => 'textfield',
            '#title' => t($field['widget']['label']),
            '#maxlength' => 128,
            '#autocomplete_path' => 'nodereference/autocomplete/'. $field['field_name'],
            '#default_value' => ''
          );

        }
        else {
          $node_field = db_result(db_query("SELECT n.title FROM {node} n WHERE n.nid = %d", $node->$field['field_name']));


          $form[$field['field_name']]['title'] = array(
            '#type' => 'textfield',
            '#title' => t($field['widget']['label']),
            '#maxlength' => 128,
            '#autocomplete_path' => 'nodereference/autocomplete/'. $field['field_name'],
            '#default_value' => $node_field ? $node_field : ''
          );
        }
      }
      else {
         $form[$field['field_name']]['relation'] = array(
            '#type' => 'select',
            '#title' => t($field['widget']['label']),
            '#default_value' => $node_field,
            '#multiple' => $field['multiple'],
            '#options' => _nodereference_potential_references($field),
          );
      }

      return $form;

    case 'validate':
      $node_field = $node->$field['field_name'];

      if ($field['widget']['type'] == 'nodereference_autocomplete') {
        if ($field['multiple']) {
          foreach($node_field['title'] as $delta => $value) {
            if ($node_field['title'][$delta]) {
              if (!db_result(db_query("SELECT n.nid FROM {node} n WHERE n.title = '%s'", $node_field['title'][$delta]))) {
                form_set_error($field['field_name'] .'][title]['. $delta, t('No post with that title exists.'));
              }
            }
          }
        }
        else {
          if ($node_field['title']) {
            if (!db_result(db_query("SELECT n.nid FROM {node} n WHERE n.title = '%s'", $node_field['title']))) {
              form_set_error($field['field_name'] .'][title', t('No post with that title exists.'));
            }
          }
        }
      }
      return;

    case 'submit':
      $node_field = $node->$field['field_name'];

      if ($field['widget']['type'] == 'nodereference_autocomplete') {
        if ($field['multiple']) {
          foreach($node_field['title'] as $delta => $value) {
            if ($node_field['title'][$delta]) {
              $node_field['relation'][$delta] = db_result(db_query("SELECT n.nid FROM {node} n WHERE n.title = '%s'", $node_field['title'][$delta]));
            }
          }
        }
        else {
          if ($node_field['title']) {
            $node_field['relation'] = db_result(db_query("SELECT n.nid FROM {node} n WHERE n.title = '%s'", $node_field['title']));
          }
        }
      }

      $node->$field['field_name'] = $node_field;
      return;
  }
}


/**
 * Implementation of hook_views_tables().
 */
function nodereference_views_tables() {
  $tables = array();

  $fields = _content_fields();
  foreach ($fields as $field) {
    if ($field['type'] == 'nodereference') {
      $tables['node_field_nodereference_data_'. $field['field_name']] = array(
        'name' => 'node_field_nodereference_data',
        'join' => array(
          'left' => array(
            'table' => 'node',
            'field' => 'vid',
          ),
          'right' => array(
            'field' => 'vid',
            'extra' => array('field_name' => $field['field_name']),
          ),
        ),
        'fields' => array(
          'field_nid' => array(
            'name' => 'Node Reference: '. $field['field_name'],
            'sortable' => TRUE,
          ),
        ),
        'sorts' => array(
          'field_nid' => array('name' => 'Node Reference: '. $field['field_name']),
        ),
        'filters' => array(
          'field_nid' => array(
            'name' => 'Node Reference: '. $field['field_name'],
            'operator' => 'views_handler_operator_eqneq',
          ),
        ),
      );
      $tables['node_field_nodereference_data_reverse_'. $field['field_name']] = array(
        'name' => 'node_field_nodereference_data',
        'join' => array(
          'left' => array(
            'table' => 'node',
            'field' => 'nid',
          ),
          'right' => array(
            'field' => 'field_nid',
            'extra' => array('field_name' => $field['field_name']),
          ),
        ),
        'fields' => array(
          'vid' => array(
            'name' => 'Node Referenced By: '. $field['field_name'],
          ),
        ),
        'filters' => array(
          'vid' => array(
            'name' => 'Node Referenced By: '. $field['field_name'],
            'operator' => 'views_handler_operator_eqneq',
          ),
        ),
      );
    }
  }

  return $tables;
}

/**
 * Fetch an array of all candidate referenced nodes, for use in presenting the selection form to the user.
 */
function _nodereference_potential_references($field, $return_full_nodes = false) {
  $related_types = array();

  foreach ($field['referenceable_types'] as $related_type) {
    if ($related_type) {
      $related_types[] = " type = '". $related_type ."'";
    }
  }

  $related_clause = implode(' OR ', $related_types);

  if (!count($related_types)) {
    return array();
  }

  $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, n.type FROM {node} n WHERE ". $related_clause ." ORDER BY n.title, n.type"));

  if (db_num_rows($result) == 0) {
    return array();
  }

  $rows = array();

  while ($node = db_fetch_object($result)) {
    if ($return_full_nodes) {
      $rows[$node->nid] = $node;
    }
    else {
      $rows[$node->nid] = $node->title;
    }
  }

  return $rows;
}

function nodereference_referenced_by_list($nid, $content_type = '') {
  if ($content_type) {
    $result = db_query("SELECT n.* FROM {node_field_nodereference_data} node_ref INNER JOIN {node} n ON n.vid = node_ref.vid AND n.type = '%s' WHERE node_ref.field_nid = %d ORDER BY delta", $nid, $content_type);
  }
  else {
    $result = db_query("SELECT n.* FROM {node_field_nodereference_data} node_ref INNER JOIN {node} n ON n.vid = node_ref.vid WHERE node_ref.field_nid = %d ORDER BY delta", $nid);
  }

  $values = array();

  while ($value = db_fetch_object($result)) {
    $values[] = $value;
  }

  return $values;
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 */
function nodereference_autocomplete($field_name, $string = '') {
  $fields = _content_fields();
  $field = $fields[$field_name];

  foreach (_nodereference_potential_references($field, TRUE) as $key => $value) {
    if (stristr($value->title, $string)) {
      $matches[$value->title] = check_plain('('. str_replace('content-', '', $value->type) .') '. $value->title);
    }
  }

  if ($matches) {
    print drupal_implode_autocomplete($matches);
  }
  else {
    print '|';
  }

  exit();
}