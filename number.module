<?php
// $Id$

/**
 * @file
 * Defines numeric field types.
 */

function number_theme() {
  return array(
    'number' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implementation of hook_field_info().
 *
 * Here we indicate that the content module will use its default
 * handling for the view of these fields.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function number_field_info() {
  return array(
    'number_integer' => array(
      'label' => 'Integer',
      'callbacks' => array(
        'view' => CONTENT_CALLBACK_DEFAULT,
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
        ),
      ),
    'number_decimal' => array(
      'label' => 'Decimal',
      'callbacks' => array(
        'view' => CONTENT_CALLBACK_DEFAULT,
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
        ),
      ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function number_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['min'] = array(
        '#type' => 'textfield',
        '#title' => t('Minimum'),
        '#default_value' => isset($field['min']) ? $field['min'] : '',
      );
      $form['max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum'),
        '#default_value' => isset($field['max']) ? $field['max'] : '',
      );
      $form['append']['prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Prefix'),
        '#size' => 60,
        '#default_value' => isset($field['prefix']) ? $field['prefix'] : '',
        '#description' => t('Define a string that should be prefixed to the value, like $ or €. Leave blank for none. Separate singular and plural values with a pipe (pound|pounds).'),
      );
      $form['append']['suffix'] = array(
        '#type' => 'textfield',
        '#title' => t('Suffix'),
        '#size' => 60,
        '#default_value' => isset($field['suffix']) ? $field['suffix'] : '',
        '#description' => t('Define a string that should suffixed to the value, like m², m/s², kb/s. Leave blank for none. Separate singular and plural values with a pipe (pound|pounds). '),
      );
      $form['allowed_values'] = array(
        '#type' => 'textarea',
        '#title' => t('Allowed values list'),
        '#default_value' => isset($field['allowed_values']) ? $field['allowed_values'] : '',
        '#required' => FALSE,
        '#rows' => 10,
        '#description' => t('The possible values this field can contain. Enter one value per line, in the format key|label. The key is the value that will be stored in the database and it must match the field storage type, %type. The label is optional and the key will be used as the label if no label is specified.', array('%type' => $field['type'])),
      );
      $form['advanced_options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Php code'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['advanced_options']['allowed_values_php'] = array(
        '#type' => 'textarea',
        '#title' => t('Code'),
        '#default_value' => isset($field['allowed_values_php']) ? $field['allowed_values_php'] : '',
        '#rows' => 6,
        '#description' => t('Advanced Usage Only: PHP code that returns a keyed array of allowed values. Should not include &lt;?php ?&gt; delimiters. If this field is filled out, the array returned by this code will override the allowed values list above.'),
      );
      return $form;

    case 'validate':
      if ($field['min'] && !is_numeric($field['min'])) {
        form_set_error('min', t('"Minimum" must be a number.'));
      }
      if ($field['max'] && !is_numeric($field['max'])) {
        form_set_error('max', t('"Maximum" must be a number.'));
      }
      break;

    case 'save':
      return array('prefix', 'suffix', 'min', 'max', 'allowed_values', 'allowed_values_php');

    case 'database columns':
      if ($field['type'] == 'number_integer') {
        return array(
          'value' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        );
      }
      if ($field['type'] == 'number_decimal') {
        return array(
          'value' => array('type' => 'float', 'not null' => FALSE, 'sortable' => TRUE),
        );
      }

    case 'filters':
      $allowed_values = content_allowed_values($field);
      if (count($allowed_values)) {
        return array(
          'default' => array(
            'list' => $allowed_values,
            'list-type' => 'list',
            'operator' => 'views_handler_operator_or',
            'value-type' => 'array',
          ),
        );
      }
      else {
        return array(
          'default' => array(
            'operator' => 'views_handler_operator_gtlt',
          ),
        );
      }
      break;
  }
}

/**
 * Implementation of hook_field().
 */
function number_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      $allowed_values = content_allowed_values($field);
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_field = $field['field_name'] .']['. $delta .'][value';
          if ($item['value'] != '') {
            if (is_numeric($field['min']) && $item['value'] < $field['min']) {
              form_set_error($error_field, t('The value of %name may be no smaller than %min.', array('%name' => t($field['widget']['label']), '%min' => $field['min'])));
            }
            if (is_numeric($field['max']) && $item['value'] > $field['max']) {
              form_set_error($error_field, t('The value of %name may be no larger than %max.', array('%name' => t($field['widget']['label']), '%max' => $field['max'])));
            }
            if (count($allowed_values) && !array_key_exists($item['value'], $allowed_values)) {
              form_set_error($error_field, t('Illegal value for %name.', array('%name' => t($field['widget']['label']))));
            }
          }
        }
      }
      break;

    // Don't save empty items.
    case 'presave':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          if ($delta > 0 && empty($item)) {
            unset($items[$delta]);
            unset($node->{$field['field_name'][$delta]});
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function number_field_formatter_info() {

  return array(
    'default' => array('label' => '9999',             'field types' => array('number_integer', 'number_decimal')),
    'us_0'    => array('label' => '9,999',            'field types' => array('number_integer', 'number_decimal')),
    'us_1'    => array('label' => '9,999.9',          'field types' => array('number_decimal')),
    'us_2'    => array('label' => '9,999.99',         'field types' => array('number_decimal')),
    'be_0'    => array('label' => '9.999',            'field types' => array('number_integer', 'number_decimal')),
    'be_1'    => array('label' => '9.999,9',          'field types' => array('number_decimal')),
    'be_2'    => array('label' => '9.999,99',         'field types' => array('number_decimal')),
    'fr_0'    => array('label' => '9 999',            'field types' => array('number_integer', 'number_decimal')),
    'fr_1'    => array('label' => '9 999, 9',         'field types' => array('number_decimal')),
    'fr_2'    => array('label' => '9 999, 99',        'field types' => array('number_decimal')),
    'unformatted' => array('label' => 'unformatted',  'field types' => array('number_integer', 'number_decimal')),
  );
}

/**
 * Implementation of hook_field_formatter().
 */
function number_field_formatter($field, $item, $formatter, $node) {
  // If the value is empty, we have $item['value'] = NULL
  if (is_null($item['value'])) {
    return '';
  }

  $item['value'] = check_plain($item['value']);

  if ($formatter == 'unformatted') {
    return $item['value'];
  }
  $allowed_values = content_allowed_values($field);
  if (!empty($allowed_values) && isset($allowed_values[$item['value']])) {
    if ($allowed_values[$item['value']] != $item['value']) {
      return $allowed_values[$item['value']];
    }
  }

  switch ($formatter) {
  case 'us_0':
    $value = number_format($item['value'], 0, '.', ',');
    break;
  case 'us_1':
    $value = number_format($item['value'], 1, '.', ',');
    break;
  case 'us_2':
    $value = number_format($item['value'], 2, '.', ',');
    break;
  case 'be_0':
    $value = number_format($item['value'], 0, ',', ' ');
    break;
  case 'be_1':
    $value = number_format($item['value'], 1, ',', '.');
    break;
  case 'be_2':
    $value = number_format($item['value'], 2, ',', '.');
    break;
  case 'fr_0':
    $value = number_format($item['value'], 0, ', ', ' ');
    break;
  case 'fr_1':
    $value = number_format($item['value'], 1, ', ', ' ');
    break;
  case 'fr_2':
    $value = number_format($item['value'], 2, ', ', ' ');
    break;
  default:
    $value = ($item['value']);
    break;
  }
  $prefixes = explode('|', $field['prefix']);
  $suffixes = explode('|', $field['suffix']);
  if ($prefixes) {
    if (sizeof($prefixes) > 1) {
      $prefix = format_plural($item['value'], $prefixes[0], $prefixes[1]);
    }
    else {
      $prefix = $field['prefix'];
    }
  }
  if ($suffixes) {
    if (sizeof($suffixes) > 1) {
      $suffix = format_plural($item['value'], $suffixes[0], $suffixes[1]);
    }
    else {
      $suffix = $field['suffix'];
    }
  }
  return $prefix . $value . $suffix;

}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function number_widget_info() {
  return array(
    'number' => array(
      'label' => 'Text Field',
      'field types' => array('number_integer', 'number_decimal'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Includes a regex to check for valid values as an additional parameter
 * the validator can use. The regex can be overridden if necessary.
 */
function number_elements() {
  return array(
    'number' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('number_process'),
      '#element_validate' => array('number_validate'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'] holds the form values.
 * @param $field
 *   the field array
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function number_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 */
function number_process($element, &$form_state) {
  $field = $element['#field'];
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => 'textfield',
    '#title' => t($field['widget']['label']),
    '#description' => t($field['widget']['description']),
    '#required' => $element['#required'],
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : '',
    '#size' => 20,
    '#maxlength' => 11,
    '#attributes' => array('class' => 'number'),
  );

  $prefixes = array();
  $suffixes = array();
  if (!empty($field['prefix'])) {
    $prefixes = explode('|', $field['prefix']);
    $element[$field_key]['#field_prefix'] = array_pop($prefixes);
  }
  if (!empty($field['suffix'])) {
    $suffixes = explode('|', $field['suffix']);
    $element[$field_key]['#field_suffix'] = array_pop($suffixes);
  }

  return $element;
}

/**
 * FAPI validation of an individual number element.
 *
 * @TODO come back here once things are working and find a way
 *   to validate differently for integers, decimals, decimal
 *   separators other than the period, etc.
 */
function number_validate($element, &$form_state) {
  $field_key = $element['#columns'][0];
  $value = $element['#value'][$field_key];
  if (($element[$field_key]['#required'] || !empty($value))) {
    $start = $value;
    $value = preg_replace('@[^-0-9\.]@', '', $value);
    if ($start != $value) {
      // No reason to make this an error, just need to inform user what has changed.
      form_set_message(t('Only 0-9 and decimals are allowed in %field. %start was changed to %value.', array(
        '%field' => t($element[$field_key]['#title']), '%start' => $start, '%value' => $value)));
    }
    form_set_value($element[$field_key], $value, $form_state);
  }
}

/**
 * FAPI theme for an individual number element.
 *
 * The textfield is already rendered by the textfield
 * theme and the html output lives in $element['#children'].
 * Override this theme to make custom changes to the output.
 *
 * $element['#field'] contains field information
 * $element['#delta]  is the position of this element in the group
 */
function theme_number($element) {
  return $element['#children'];
}