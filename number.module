<?php
// $Id$

/**
 * @file
 * Defines standard simple field types.
 */

/**
 * Implementation of hook_help().
 */
function number_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines numeric field types. <em>Note: Requires content.module.</em>');
  }
}

/**
 * Implementation of hook_field_info().
 */
function number_field_info() {
  return array(
    'number_integer' => array('label' => 'Integer'),
    'number_decimal' => array('label' => 'Decimal'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function number_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['min'] = array(
        '#type' => 'textfield',
        '#title' => t('Minimum'),
        '#default_value' => $field['min'] ? $field['min'] : '',
      );
      $form['max'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum'),
        '#default_value' => $field['min'] ? $field['min'] : '',
      );
      return $form;

    case 'validate':
      if ($field['min'] && !is_numeric($field['min'])) {
        form_set_error('rows', t('"Minimum" must be a number.'));
      }
      if ($field['max'] && !is_numeric($field['max'])) {
        form_set_error('rows', t('"Maximum" must be a number.'));
      }
      break;

    case 'save':
      return array('min', 'max');
  }
}

/**
 * Implementation of hook_field().
 */
function number_field($op, &$node, $field, $a2, $a3, $a4) {
  switch ($op) {
    case 'load':
      switch($field['type']) {
        case 'number_integer':
          $result = db_query("SELECT field_int FROM {node_field_int_data} WHERE vid = %d AND field_name = '%s' ORDER BY delta", $node->vid, $field['field_name']);
          if ($field['multiple']) {
            $values = array();
            while ($value = db_fetch_object($result)) {
              $values[] = array('value' => $value->field_int);
            }
            $additions = array($field['field_name'] => $values);
          }
          else {
            $value = db_fetch_object($result);
            $additions = array($field['field_name'] => array('value' => $value->field_int));
          }
          break;
        case 'number_decimal':
          $result = db_query("SELECT field_float FROM {node_field_float_data} WHERE vid = %d AND field_name = '%s' ORDER BY delta", $node->vid, $field['field_name']);
          if ($field['multiple']) {
            $values = array();
            while ($value = db_fetch_object($result)) {
              $values[] = array('value' => $value->field_int);
            }
            $additions = array($field['field_name'] => $values);
          }
          else {
            $value = db_fetch_object($result);
            $additions = array($field['field_name'] => array('value' => $value->field_float));
          }
          break;
      }
      return $additions;

    case 'view':
      $output = '';
      $node_field = $node->$field['field_name'];

      if ($field['multiple']) {
        foreach ($node_field as $delta => $item) {
          $node_field[$delta]['view'] = number_field_view($field, $item['value']);
        }
      }
      else {
        $node_field['view'] = number_field_view($field, $node_field['value']);
      }

      $node->$field['field_name'] = $node_field;
      if ($field['multiple']) {
        $output = '';
        foreach ($node_field as $delta => $item) {
          $output .= '<div class="'. $field['field_name'] .'">'. $item['view'] .'</div>';
        }
        return $output;
      }
      else {
        return '<div class="'. $field['field_name'] .'">'. $node_field['view'] .'</div>';
      }

    case 'insert':
      $node_field = $node->$field['field_name'];
      switch($field['type']) {
        case 'number_integer':
          if ($field['multiple']) {
            foreach ($node_field as $delta => $item) {
              db_query("INSERT INTO {node_field_int_data} (nid, vid, field_name, delta, field_int) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $item['value']);
            }
          }
          else {
            db_query("INSERT INTO {node_field_int_data} (nid, vid, field_name, field_int) VALUES (%d, %d, '%s', %d)", $node->nid, $node->vid, $field['field_name'], $node_field['value']);
          }
          break;
        case 'number_decimal':
          if ($field['multiple']) {
            foreach ($node_field as $delta => $item) {
              db_query("INSERT INTO {node_field_float_data} (nid, vid, field_name, delta, field_float) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $item['value']);
            }
          }
          else {
            db_query("INSERT INTO {node_field_float_data} (nid, vid, field_name, field_float) VALUES (%d, %d, '%s', %d)", $node->nid, $node->vid, $field['field_name'], $node_field['value']);
          }
          break;
      }
      return;

    case 'update':
      $node_field = $node->$field['field_name'];
      // Delete and insert, rather than update, in case a field was added.
      switch($field['type']) {
        case 'number_integer':
          db_query("DELETE FROM {node_field_int_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
          if ($field['multiple']) {
            foreach ($node_field as $delta => $item) {
              db_query("INSERT INTO {node_field_int_data} (nid, vid, field_name, delta, field_int) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $item['value']);
            }
          }
          else {
            db_query("INSERT INTO {node_field_int_data} (nid, vid, field_name, field_int) VALUES (%d, %d, '%s', %d)", $node->nid, $node->vid, $field['field_name'], $node_field['value']);
          }
          break;
        case 'number_decimal':
          db_query("DELETE FROM {node_field_float_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
          if ($field['multiple']) {
            foreach ($node_field as $delta => $item) {
              db_query("INSERT INTO {node_field_float_data} (nid, vid, field_name, delta, field_float) VALUES (%d, %d, '%s', %d, %d)", $node->nid, $node->vid, $field['field_name'], $delta, $item['value']);
            }
          }
          else {
            db_query("INSERT INTO {node_field_float_data} (nid, vid, field_name, field_float) VALUES (%d, %d, '%s', %d)", $node->nid, $node->vid, $field['field_name'], $node_field['value']);
          }
          break;
      }
      return;

    case 'delete':
      // Delete using nid rather than vid to purge all revisions.
      switch($field['type']) {
        case 'number_integer':
          db_query("DELETE FROM {node_field_int_data} WHERE nid = %d AND field_name = '%s'", $node->nid, $field['field_name']);
          break;
        case 'number_decimal':
          db_query("DELETE FROM {node_field_float_data} WHERE nid = %d AND field_name = '%s'", $node->nid, $field['field_name']);
          break;
      }
      return;
  }
}

/**
 * Implementation of hook_widget_info().
 */
function number_widget_info() {
  return array(
    'number' => array(
      'label' => 'Text Field',
      'field types' => array('number_integer', 'number_decimal'),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function number_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      return array();

    case 'validate':
      break;

    case 'save':
      return array();
  }
}


/**
 * Implementation of hook_widget().
 */
function number_widget($op, &$node, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $node_field = $node->$field['field_name'];

      $form[$field['field_name']] = array('#tree' => TRUE);

      if ($field['multiple']) {
        foreach (range(0, 2) as $delta) {
          $form[$field['field_name']][$delta]['value'] = array(
            '#type' => 'textfield',
            '#title' => t($field['widget']['label']),
            '#default_value' => $node_field[$delta]['value'],
            '#required' => ($delta == 0) ? $field['required'] : FALSE,
          );
        }
      }
      else {
        $form[$field['field_name']]['value'] = array(
          '#type' => 'textfield',
          '#title' => t($field['widget']['label']),
          '#default_value' => $node_field['value'],
          '#required' => $field['required'],
        );
      }
      return $form;

    case 'validate':
      $node_field = $node->$field['field_name'];

      if ($field['multiple']) {
        if (is_array($node_field)) {
          foreach ($node_field as $delta => $item) {
            if ($item['value'] != '') {
              if (is_numeric($field['min']) && $item['value'] < $field['min']) {
                form_set_error($field['field_name'] .']['. $delta .'][value', t('The value of %name may be no smaller than %min.', array('%name' => t($field['widget']['label']), '%min' => $field['min'])));
              }
              if (is_numeric($field['max']) && $item['value'] > $field['max']) {
                form_set_error($field['field_name'] .']['. $delta .'][value', t('The value of %name may be no larger than %max.', array('%name' => t($field['widget']['label']), '%max' => $field['max'])));
              }
            }
          }
        }
      }
      else {
        if (isset($node_field['value'])) {
          if ($node_field['value'] != '') {
            if (is_numeric($field['min']) && $node_field['value'] < $field['min']) {
              form_set_error($field['field_name'] .'][value', t('The value of %name may be no smaller than %min.', array('%name' => t($field['widget']['label']), '%min' => $field['min'])));
            }
            if (is_numeric($field['max']) && $node_field['value'] > $field['max']) {
              form_set_error($field['field_name'] .'][value', t('The value of %name may be no larger than %max.', array('%name' => t($field['widget']['label']), '%max' => $field['max'])));
            }
          }
        }
      }
      return;
  }
}


/**
 * Implementation of hook_field_view().
 */
function number_field_view($field, $value) {
  return check_plain($value);
}


/**
 * Implementation of hook_views_tables().
 */
function number_views_tables() {
  $tables = array();

  $fields = _content_fields();
  foreach ($fields as $field) {
    if ($field['type'] == 'number_integer') {
      $tables['node_field_int_data_'. $field['field_name']] = array(
        'name' => 'node_field_int_data',
        'join' => array(
          'left' => array(
            'table' => 'node',
            'field' => 'vid',
          ),
          'right' => array(
            'field' => 'vid',
            'extra' => array('field_name' => $field['field_name']),
          ),
        ),
        'fields' => array(
          'field_int' => array(
            'name' => 'Integer: '. $field['field_name'],
            'sortable' => TRUE,
          ),
        ),
        'sorts' => array(
          'field_int' => array('name' => 'Integer: '. $field['field_name']),
        ),
        'filters' => array(
          'field_int' => array(
            'name' => 'Integer: '. $field['field_name'],
            'operator' => array(
              '=' => 'is equal to',
              '!=' => 'is not equal to',
              '>' => 'is greater than',
              '<' => 'is less than',
              '>=' => 'is greater than or equal to',
              '<=' => 'is less than or equal to',
            ),
          ),
        ),
      );
    }
    if ($field['type'] == 'number_decimal') {
      $tables['node_field_float_data_'. $field['field_name']] = array(
        'name' => 'node_field_float_data',
        'join' => array(
          'left' => array(
            'table' => 'node',
            'field' => 'vid',
          ),
          'right' => array(
            'field' => 'vid',
            'extra' => array('field_name' => $field['field_name']),
          ),
        ),
        'fields' => array(
          'field_int' => array(
            'name' => 'Decimal: '. $field['field_name'],
            'sortable' => TRUE,
          ),
        ),
        'sorts' => array(
          'field_int' => array('name' => 'Decimal: '. $field['field_name']),
        ),
        'filters' => array(
          'field_int' => array(
            'name' => 'Decimal: '. $field['field_name'],
            'operator' => array(
              '=' => 'is equal to',
              '!=' => 'is not equal to',
              '>' => 'is greater than',
              '<' => 'is less than',
              '>=' => 'is greater than or equal to',
              '<=' => 'is less than or equal to',
            ),
          ),
        ),
      );
    }
  }

  return $tables;
}
