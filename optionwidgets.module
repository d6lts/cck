<?php
// $Id$

/**
 * @file
 * Defines selection, check box and radio button widgets for text and numeric fields.
 */

/**
 * Implementation of hook_help().
 */
function optionwidgets_help($path, $arg) {
  if (preg_match('|^admin/content/types/[^/]*/fields/[^/]*$|', $path)) {
    if (($field = content_fields($arg[3], $arg[5])) && in_array($field['widget']['type'], array_keys(optionwidgets_widget_info()))) {
      $output = t('Create a list of options as a list in <strong>Allowed values</strong> or as an array in Php code at the bottom of this page. These values will be the same for the %field in all content types. ', array('%field' => $field['widget']['label']));
      if ($field['widget']['type'] == 'optionwidgets_onoff') {
        $output .= '<br/>'. t('For a \'Single on/off checkbox\' widget, define the \'off\' value first, then the \'on\' value in the <strong>Allowed values</strong> section. Note that the checkbox will be labeled with the label of the \'on\' value.');
      }
      else {
        $output .= '<br/>'. t('The \'Checkboxes / radio buttons\' widget will display checkboxes if the multiple values option is selected for this field, otherwise radios will be displayed.');
      }
      return $output;
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function optionwidgets_theme() {
  return array(
    'optionwidgets_select' => array(
      'arguments' => array('element' => NULL),
    ),
    'optionwidgets_buttons' => array(
      'arguments' => array('element' => NULL),
    ),
    'optionwidgets_onoff' => array(
      'arguments' => array('element' => NULL),
    ),
    'optionwidgets_none' => array(
      'arguments' => array('widget_type' => NULL, 'field_name' => NULL, 'node_type' => NULL),
      ),
  );
}

/**
 * Implementation of hook_widget_info().
 *
 * We need custom handling of multiple values because we need
 * to combine them into a options list rather than display
 * multiple elements. We will use the content module's default
 * handling for default values.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function optionwidgets_widget_info() {

  return array(
    'optionwidgets_select' => array(
      'label' => 'Select list',
      'field types' => array('text', 'number_integer', 'number_decimal'),
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        'multiple values' => CONTENT_CALLBACK_CUSTOM,
        ),
      'callback arguments' => array(
        'default value' => 'content_default_value',
        ),
   ),
    'optionwidgets_buttons' => array(
      'label' => 'Check boxes/radio buttons',
      'field types' => array('text', 'number_integer', 'number_decimal'),
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        'multiple values' => CONTENT_CALLBACK_CUSTOM,
        ),
      'callback arguments' => array(
        'default value' => 'content_default_value',
        ),
    ),
    'optionwidgets_onoff' => array(
      'label' => 'Single on/off checkbox',
      'field types' => array('text', 'number_integer', 'number_decimal'),
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        'multiple values' => CONTENT_CALLBACK_CUSTOM,
        ),
      'callback arguments' => array(
        'default value' => 'content_default_value',
        ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function optionwidgets_elements() {
  return array(
    'optionwidgets_select' => array(
      '#input' => TRUE, '#field' => array(),
      '#columns' => array('value'), '#delta' => 0,
      '#value_callback' => 'optionwidgets_value',
      '#process' => array('optionwidgets_select_process'),
      '#element_validate' => array('optionwidgets_validate'),
      ),
    'optionwidgets_buttons' => array(
      '#input' => TRUE, '#field' => array(),
      '#columns' => array('value'), '#delta' => 0,
      '#value_callback' => 'optionwidgets_value',
      '#process' => array('optionwidgets_buttons_process'),
      '#element_validate' => array('optionwidgets_validate'),
      ),
    'optionwidgets_onoff' => array(
      '#input' => TRUE, '#field' => array(),
      '#columns' => array('value'), '#delta' => 0,
      '#value_callback' => 'optionwidgets_value',
      '#process' => array('optionwidgets_onoff_process'),
      '#element_validate' => array('optionwidgets_validate'),
      ),
    );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'] holds the form values.
 * @param $field
 *   the field array
 * @param $items
 *   an array of default values for this element
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function optionwidgets_widget(&$form, &$form_state, $field, $items, $delta = 0) {

  // No hard-coding of column names so this can be used by any field.
  // This is a change from earlier versions which hard-coded 'value'.
  $db_info = content_database_info($field);
  $columns = array_keys($db_info['columns']);
  $field_key  = $columns[0];

  $element = array(
    '#type' => $field['widget']['type'],
    '#field' => $field,
    '#columns' => $columns,
    '#delta' => $delta,
    '#weight' => t($field['widget']['weight']),
    '#default_value' => !empty($items) ? $items : array(),
  );
  return $element;
}

/**
 * Value for an optionwidgets element.
 *
 * Transpose item array from delta => field to field => delta,
 * turning multiple items into a single element.
 */
function optionwidgets_value(&$element, $edit = FALSE) {
  if (func_num_args() == 1) {
    return optionwidgets_data2form($element, $element['#default_value']);
  }
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set from $element['#default_value'].
 */
function optionwidgets_buttons_process($element, &$form_state) {
  $field = $element['#field'];
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => $field['multiple'] ? 'checkboxes' : 'radios',
    '#title' => t($field['widget']['label']),
    '#description' => t($field['widget']['description']),
    '#required' => $field['required'],
    '#multiple' => $field['multiple'],
    '#options' => optionwidgets_options($field),
    '#default_value' => isset($element['#value']) ? $element['#value'] : NULL,
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set from $element['#default_value'].
 */
function optionwidgets_select_process($element, &$form_state) {
  $field = $element['#field'];
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => 'select',
    '#title' => t($field['widget']['label']),
    '#description' => t($field['widget']['description']),
    '#required' => $field['required'],
    '#multiple' => $field['multiple'],
    '#options' => optionwidgets_options($field),
    '#default_value' => isset($element['#value']) ? $element['#value'] : NULL,
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set from $element['#default_value'].
 */
function optionwidgets_onoff_process($element, &$form_state) {
  $field = $element['#field'];
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => 'checkbox',
    '#title' => t($field['widget']['label']),
    '#description' => t($field['widget']['description']),
    '#required' => $field['required'],
    '#multiple' => $field['multiple'],
    '#options' => optionwidgets_options($field),
    '#default_value' => isset($element['#value']) ? $element['#value'] : NULL,
  );
  return $element;
}

/**
 * FAPI function to validate optionwidgets element.
 *
 * Transpose selections from field => delta to delta => field,
 * turning multiple selected options into multiple parent elements.
 * Immediate parent is the delta, need to get back to parent's parent
 * to create multiple elements.
 */
function optionwidgets_validate($element, &$form_state) {
  $updated = optionwidgets_form2data($element, $element['#value']);
  $parents = $element['#parents'];
  array_pop($parents);
  form_set_value(array('#parents' => $parents), $updated, $form_state);
}

/**
 * Helper function to transpose the values as stored in the database
 * to the format the widget needs. Can be called anywhere this
 * transformation is needed.
 */
function optionwidgets_data2form($element, $items) {
  $field      = $element['#field'];
  $field_key  = $element['#columns'][0];
  $options    = optionwidgets_options($field);

  $items_transposed = content_transpose_array_rows_cols($items);
  $values = (isset($items_transposed[$field_key]) && is_array($items_transposed[$field_key])) ? $items_transposed[$field_key] : array();
  $keys = array();
  foreach ($values as $value) {
    $key = array_search($value, array_keys($options));
    if (isset($key)) {
      $keys[] = $value;
    }
  }
  if ($field['multiple'] || $element['#type'] == 'optionwidgets_onoff') {
    return $keys;
  }
  else {
    return reset($keys);
  }
}

/**
 * Helper function to transpose the values returned by submitting the widget
 * to the format to be stored in the field. Can be called anywhere this
 * transformation is needed.
 */
function optionwidgets_form2data($element, $items) {
  $field = $element['#field'];
  $field_key = $element['#columns'][0];

  $options = optionwidgets_options($field);
  $keys = !empty($items[$field_key]) ? $items[$field_key] : '';
  if (!is_array($keys)) {
    $keys = array($keys);
  }
  $values = array();
  foreach ($keys as $key => $value) {
    if (array_key_exists($value, $options)) {
      $values[] = $value;
    }
  }
  if ($element['#type'] == 'optionwidgets_onoff' && empty($values)) {
    $keys = array_keys($options);
    $values[] = $keys[0];
  }
  return content_transpose_array_rows_cols(array($field_key => $values));
}

/**
 * Helper function for finding the allowed values list for a field.
 *
 * See if there is a module hook for the option values.
 * Otherwise, try content_allowed_values() for an options list.
 */
function optionwidgets_options($field) {
  $types = _content_field_types();
  $function = $types[$field['type']]['module'] .'_allowed_values';
  if (function_exists($function)) {
    return $function($field);
  }
  else {
    $values = content_allowed_values($field);
    return (array) $values;
  }
}

/**
 *  Theme the label for the empty value for options that are not required.
 *  The default theme will display N/A for a radio list and blank for a select.
 */
function theme_optionwidgets_none($widget_type, $field_name, $node) {
  switch ($widget_type) {
  case 'optionwidgets_buttons':
    return t('N/A');
  default :
    return '';
  }
}

/**
 * FAPI themes for optionwidgets.
 *
 * The select, checkboxes or radios are already rendered by the
 * select, checkboxes, or radios themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field'] contains field information
 * $element['#delta]  is the position of this element in the group
 */
function theme_optionwidgets_select($element) {
  return $element['#children'];
}

function theme_optionwidgets_onoff($element) {
  return $element['#children'];
}

function theme_optionwidgets_buttons($element) {
  return $element['#children'];
}