<?php
// $Id$

/**
 * @file
 * Defines selection, check box and radio button widgets for text and numeric fields.
 */

/**
 * Implementation of hook_help().
 */
function optionwidgets_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines selection, check box and radio button widgets for text and numeric fields. <em>Note: Requires content.module, text.module and number.module.</em>');
  }
}

/**
 * Implementation of hook_widget_info().
 */
function optionwidgets_widget_info() {
  return array(
    'options_select' => array(
      'label' => 'Select list',
      'field types' => array('text', 'number_integer', 'number_decimal'),
    ),
    'options_buttons' => array(
      'label' => 'Check boxes/radio buttons',
      'field types' => array('text', 'number_integer', 'number_decimal'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function optionwidgets_widget($op, &$node, $field, &$node_field) {
  switch ($op) {
    case 'prepare form values':
      $options = _optionwidgets_options($field);

      if ($field['multiple']) {
        $node_field_transposed = content_transpose_array_rows_cols($node_field);
        $values = $node_field_transposed['value'];
      }
      else {
        $values = array($node_field['value']);
      }

      $keys = array();
      foreach ($values as $value) {
        $key = array_search($value, $options);
        if ($key) {
          $keys[] = $key;
        }
      }

      if ($field['widget']['type'] == 'options_buttons' && !$field['multiple']) {
        // Radio buttons function on a scalar rather than an array.
        $node_field['default key'] = reset($keys);
      }
      else {
        $node_field['default keys'] = $keys;
      }
      break;

    case 'form':
      $options = _optionwidgets_options($field);

      $form = array();

      $form[$field['field_name']] = array('#tree' => TRUE);

      switch ($field['widget']['type']) {
        case 'options_select':
          $form[$field['field_name']]['keys'] = array(
            '#type' => 'select',
            '#title' => t($field['widget']['label']),
            '#default_value' => $node_field['default keys'],
            '#multiple' => $field['multiple'],
            '#options' => $options,
            '#required' => $field['required'],
            '#description' => $field['widget']['description'],
          );
          break;

        case 'options_buttons':
          if ($field['multiple']) {
            $form[$field['field_name']]['keys'] = array(
              '#type' => 'checkboxes',
              '#title' => t($field['widget']['label']),
              '#default_value' => $node_field['default keys'],
              '#options' => $options,
              '#required' => $field['required'],
              '#description' => $field['widget']['description'],
            );
          }
          else {
            $form[$field['field_name']]['key'] = array(
              '#type' => 'radios',
              '#title' => t($field['widget']['label']),
              '#default_value' => $node_field['default key'],
              '#options' => $options,
              '#required' => $field['required'],
              '#description' => $field['widget']['description'],
            );
          }
          break;
      }
      return $form;

    case 'process form values':
      $options = _optionwidgets_options($field);

      if ($field['widget']['type'] == 'options_buttons' && !$field['multiple']) {
        // Radio buttons function on a scalar rather than an array.
        $keys = array($node_field['key']);
      }
      else {
        $keys = $node_field['keys'];
      }

      $values = array();
      foreach ($keys as $key) {
        if (isset($options[$key])) {
          $values[] = $options[$key];
        }
      }

      if ($field['multiple']) {
        $node_field = content_transpose_array_rows_cols(array('value' => $values));
      }
      else {
        $node_field['value'] = reset($values);
      }
      break;
  }
}

function _optionwidgets_options($field) {
  $allowed_values = explode("\n", $field['allowed_values']);
  $allowed_values = array_map('trim', $allowed_values);
  $allowed_values = array_filter($allowed_values, 'strlen');

  // Create an array indexed starting at 1 to prevent issues with checkboxes.
  $return_array = array();
  $i = 1;
  foreach ($allowed_values as $value) {
    $return_array[$i] = $value;
    $i++;
  }

  return ($return_array);
}

