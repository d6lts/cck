<?php
// $Id$

/**
 * Implementation of hook_install().
 */
function text_install() {
  content_notify('install', 'text');
}

/**
 * Implementation of hook_uninstall().
 */
function text_uninstall() {
  content_notify('uninstall', 'text');
}

/**
 * Implementation of hook_enable().
 *
 * Notify content module when this module is enabled.
 */
function text_enable() {
  content_notify('enable', 'text');
}

/**
 * Implementation of hook_disable().
 *
 * Notify content module when this module is disabled.
 */
function text_disable() {
  content_notify('disable', 'text');
}

/**
 * Test and report Content module installation requirements.
 */
function text_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time
  $t = get_t();

  $current_version = drupal_get_installed_schema_version('text');
  $minimum_version = 5;

  if ($current_version < $minimum_version) {
    $requirements['text_version'] = array(
      'title' => $t('Text Version'),
      'value' => $t('The Text fields in your CCK database are not up to date and will not work correctly in this version of the Text module. Please upgrade your database in Drupal 5.x to at least Text update %number, using the latest 5.x version of the Text module, before upgrading to Drupal 6.x.', array('%number' => $minimum_version)),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Rename widgets to match hook_elements values.
 */
function text_update_6000() {
  include_once('./'. drupal_get_path('module', 'content') .'/content.module');
  $ret = array();
  $result = db_query("SELECT * FROM {". content_instance_tablename() ."} WHERE widget_type = 'text'");
  while ($field_instance = db_fetch_array($result)) {
    $widget_settings = unserialize($field_instance['widget_settings']);
    $new_widget_type = ($widget_settings['rows'] > 1) ? 'text_textarea' : 'text_textfield';
    $ret[] = update_sql("UPDATE {". content_instance_tablename() ."} SET widget_type = '$new_widget_type' WHERE field_name = '{$field_instance['field_name']}' AND type_name = '{$field_instance['type_name']}'");
  }
  return $ret;
}

/**
 * Set all columns to accept NULL values and set empty string values in the
 * database to NULL.
 *
 * Leaving it up to module developers to handle conversion of numbers to
 * NULL values, since there are times when zeros are valid data and times
 * when they should be NULL.
 *
 */
function text_update_6001() {
  include_once('./'. drupal_get_path('module', 'content') .'/content.module');
  $ret = array();

  // Get the latest cache values and schema.
  content_clear_type_cache(TRUE, TRUE);

  $types = content_types();
  $fields = content_fields();
  foreach ($fields as $field) {
    switch ($field['type']) {
      case 'text':
        $db_info = content_database_info($field);
        foreach ($db_info['columns'] as $column => $attributes) {
          $attributes['not null'] = FALSE;
          $column = $attributes['column'];
          db_change_field($ret, $db_info['table'], $column,$column, $attributes);
          db_field_set_no_default($ret, $db_info['table'], $column);
          if ($attributes['type'] == 'varchar' || $attributes['type'] == 'text') {
            $ret = update_sql("UPDATE {". $table ."} SET ". $column ." = NULL WHERE ". $column ." = ''");
          }
          else {
            $ret = update_sql("UPDATE {". $table ."} SET ". $column ." = NULL WHERE ". $column ." = 0");
          }
        }
    }
  }
  return $ret;
}