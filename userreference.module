<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing a user from a node.
 */

/**
 * Implementation of hook_help().
 */
function userreference_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines a field type for referencing a user from a node.');
  }
}

/**
 * Implementation of hook_field_info().
 */
function userreference_field_info() {
  return array(
    'userreference' => array('label' => 'User Reference'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function userreference_field_settings($op, $field, $scope) {
  switch ($op) {
    case 'form':
      $form = array();
      switch ($scope) {
        case 'instance':
          break;

        case 'global':
          break;
      }
      return $form;

    case 'validate':
      switch ($scope) {
        case 'instance':
          break;
      }
      break;

    case 'save':
      switch ($scope) {
        case 'instance':
          return array();
        case 'global':
          return array();
      }
      break;
  }
}

/**
 * Implementation of hook_field().
 */
function userreference_field($op, $node, $field, $a2, $a3, $a4) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT field_uid FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s' ORDER BY delta", $node->vid, $field['field_name']);

      if ($field['multiple']) {
        $values = array();
        while ($value = db_fetch_object($result)) {
          $values[] = $value->field_uid;
        }
        $additions = array($field['field_name'] => $values);
      } else {
        $value = db_fetch_object($result);
        $additions = array($field['field_name'] => array($value->field_uid));
      }

      return $additions;

    case 'view':
      $node_field = $node->$field['field_name'];

      $user_array = array();

      foreach ($node_field as $referenced_uid) {
        $referenced_user = user_load(array('uid' => $referenced_uid));
        $user_array[] = theme('username', $referenced_user);
      }

      $item['view'] = theme('item_list', $user_array);

      return '<div class="'. $field['field_name'] .'">'. $item['view'] .'</div>';

    case 'form':
      $form = array();
      $node_field = $node->$field['field_name'];

      $form[$field['field_name']] = array('#tree' => TRUE);

      if($field['multiple']) {
        $form[$field['field_name']]['relation'] = array(
          '#type' => 'select',
          '#title' => t($field['label']),
          '#default_value' => $node_field,
          '#multiple' => $field['multiple'],
          '#options' => _userreference_potential_references($field),
        );

      } else {
        $form[$field['field_name']]['relation'] = array(
          '#type' => 'textfield',
          '#title' => t($field['label']),
          '#maxlength' => 60,
          '#autocomplete_path' => 'user/autocomplete',
          '#default_value' => $node_field ? $node_field : ''
        );
      }

      return $form;

    case 'validate':
      return;

    case 'insert':
      $node_field = $node->$field['field_name'];

      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $value);
        }
      }
      else {
        // Ajax user autocomplete returns the user's name, but we need to save the uid
        $user_id = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $value));
        db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $node_field['relation']);
      }
      break;

    case 'update':
      $node_field = $node->$field['field_name'];

      // Delete and insert, rather than update, in case a field was added.
      db_query("DELETE FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $value);
        }
      }
      else {
        // Ajax user autocomplete returns the user's name, but we need to save the uid
        $user_id = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $value));
        db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $node_field['relation']);
      }
      return;

    case 'delete':
      db_query("DELETE FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      return;
  }
}

/**
 * Implementation of hook_field_query().
 */
function userreference_field_query($field, $op, $value) {
  $query_additions = array();

  switch ($op) {
    case 'is':
      $query_additions['tables'] = array('%table' => 'node_field_userreference_data');
      $query_additions['where'] = '%table.field_uid = %d';
      $query_additions['data'] = array($value);
      break;
  }

  return $query_additions;
}

/**
 * Fetch an array of all candidate referenced users, for use in presenting the selection form to the user.
 */
function _userreference_potential_references($field) {
  $result = db_query("SELECT u.name, u.uid FROM {users} u ORDER BY u.name ASC");

  $rows = array();

  while ($user = db_fetch_object($result)) {
    $rows[$user->uid] = $user->name;
  }

  return $rows;
}

function userreference_referenced_by_list($uid, $content_type = '') {
  if ($content_type) {
    $result = db_query("SELECT n.* FROM {node_field_userreference_data} user_ref INNER JOIN {node} n ON n.vid = user_ref.vid AND n.type = '%s' WHERE user_ref.field_uid = %d ORDER BY n.type, delta", $content_type, $uid);
  } else {
    $result = db_query("SELECT n.* FROM {node_field_userreference_data} user_ref INNER JOIN {node} n ON n.vid = user_ref.vid WHERE user_ref.field_uid = %d ORDER BY n.type, delta", $uid);
  }

  $values = array();

  while ($value = db_fetch_object($result)) {
    $values[] = $value;
  }

  return $values;
}

function userreference_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'categories':
      return array('referenced by');
      break;

    case 'view':
      $nodes = userreference_referenced_by_list($user->uid);

      $node_array = array();

      foreach ($nodes as $node) {
        $node_array[] = '('. str_replace('content-', '', $node->type) .') '. l($node->title, 'node/'. $node->vid);
      }

      return array('referenced by' => array('view' => '<div class="'. $field['field_name'] .'">'. theme('item_list',  $node_array) .'</div>'));
      break;
  }
}
