<?php
// $Id$

/**
 * @file
 * Defines a field type for referencing a user from a node. 
 */

/**
 * Implementation of hook_help().
 */
function userreference_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Defines a field type for referencing a user from a node.');
  }
}

/**
 * Implementation of hook_field_info().
 */
function userreference_field_info() {
  return array(
    'userreference' => array('label' => 'User Reference'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function userreference_field_settings($op, $field, $scope) {
  switch ($op) {
    case 'form':
      $form = array();
      switch ($scope) {
        case 'instance':
          break;

        case 'global':
          break;
      }
      return $form;

    case 'validate':
      switch ($scope) {
        case 'instance':
          break;
      }
      break;

    case 'save':
      switch ($scope) {
        case 'instance':
          return array();
        case 'global':
          return array();
      }
      break;
  }
}

/**
 * Implementation of hook_field().
 */
function userreference_field($op, $node, $field, $a2, $a3, $a4) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT field_int FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s' ORDER BY delta", $node->nid, $field['field_name']);

      if ($field['multiple']) {
        $values = array();
        while ($value = db_fetch_object($result)) {
          $values[] = $value->field_uid;
        }
        $additions = array($field['field_name'] => $values);
      } else {
        $value = db_fetch_object($result);
        $additions = array($field['field_name'] => array($value->field_uid));
      }

      return $additions;

    case 'view':
      $node_field = $node->$field['field_name'];

      $output = '<ul class="userreference-'. $field['field_name'] .'">';
      foreach ($node_field as $referenced_uid) {
        $referenced_user = user_load(array('uid' => $referenced_uid));
        $output .= '<li>'. theme('username', $referenced_user) .'</li>';
      }
      $output .= '</ul>';

      return $output;

    case 'form':
      $form = array();
      $node_field = $node->$field['field_name'];

      $form[$field['field_name']] = array('#tree' => TRUE);

      $form[$field['field_name']]['relation'] = array(
        '#type' => 'select',
        '#title' => t($field['label']),
        '#default_value' => $node_field,
        '#multiple' => $field['multiple'],
        '#options' => _userreference_potential_references($field),
      );

      return $form;

    case 'validate':
      return;

    case 'insert':
      $node_field = $node->$field['field_name'];

      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $value);
        }
      }
      else {
        db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $node_field['relation']);
      }
      break;

    case 'update':
      $node_field = $node->$field['field_name'];

      // Delete and insert, rather than update, in case a field was added.
      db_query("DELETE FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      if ($field['multiple']) {
        foreach ($node_field['relation'] as $delta => $value) {
          db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $value);
        }
      }
      else {
        db_query("INSERT INTO {node_field_userreference_data} (vid, field_name, delta, field_uid) VALUES (%d, '%s', %d, %d)", $node->vid, $field['field_name'], $delta, $node_field['relation']);
      }
      return;

    case 'delete':
      db_query("DELETE FROM {node_field_userreference_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      return;
  }
}

/**
 * Implementation of hook_field_query().
 */
function userreference_field_query($field, $op, $value) {
  $query_additions = array();

  switch ($op) {
    case 'is':
      $query_additions['tables'] = array('%table' => 'node_field_userreference_data');
      $query_additions['where'] = '%table.field_uid = %d';
      $query_additions['data'] = array($value);
      break;
  }

  return $query_additions;
}

/**
 * Fetch an array of all candidate referenced users, for use in presenting the selection form to the user.
 */
function _userreference_potential_references($field) {
  $result = db_query("SELECT u.name, u.uid FROM {users} u ORDER BY u.name ASC");

  $rows = array();

  while ($user = db_fetch_object($result)) {
    $rows[$user->uid] = $user->name;
  }

  return $rows;
}
